package com.seeewo4kin.bot.Bot;

import com.seeewo4kin.bot.Entity.Application;
import com.seeewo4kin.bot.Entity.User;
import com.seeewo4kin.bot.Enums.UserState;
import com.seeewo4kin.bot.Enums.ValueType;
import com.seeewo4kin.bot.ValueGettr.CryptoPriceService;
import com.seeewo4kin.bot.ValueGettr.ExchangeRateCache;
import com.seeewo4kin.bot.service.ApplicationService;
import com.seeewo4kin.bot.service.UserService;
import org.springframework.stereotype.Service;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

@Service
public class MessageProcessor {
    private final UserService userService;
    private final ApplicationService applicationService;
    private final CryptoPriceService cryptoPriceService;
    private final ExchangeRateCache exchangeRateCache;

    private final Map<Long, Application> temporaryApplications = new HashMap<>();
    private final Map<Long, Map<String, Object>> calculatorData = new HashMap<>();

    public MessageProcessor(UserService userService,
                            ApplicationService applicationService,
                            CryptoPriceService cryptoPriceService,
                            ExchangeRateCache exchangeRateCache) {

        this.userService = userService;
        this.applicationService = applicationService;
        this.cryptoPriceService = cryptoPriceService;
        this.exchangeRateCache = exchangeRateCache;
    }

    public void processUpdate(Update update, MyBot bot) {
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ callback'–æ–≤ –æ—Ç –∫–Ω–æ–ø–æ–∫
        if (update.hasCallbackQuery()) {
            processCallback(update, bot);
            return;
        }

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        if (update.hasMessage() && update.getMessage().hasText()) {
            processTextMessage(update, bot);
        }
    }

    private void processTextMessage(Update update, MyBot bot) {
        String text = update.getMessage().getText();
        Long chatId = update.getMessage().getChatId();
        Long telegramId = update.getMessage().getFrom().getId();

        User user = userService.findByTelegramId(telegramId);

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—Ç–º–µ–Ω—É –≤ –ª—é–±–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        if (text.equalsIgnoreCase("–æ—Ç–º–µ–Ω–∞") || text.equalsIgnoreCase("cancel") || text.equals("/cancel")) {
            processApplicationCancellation(chatId, user, bot);
            return;
        }

        // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –≤ –Ω–∞—á–∞–ª—å–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
        if (user == null || user.getState() == UserState.START) {
            processCommand(update, bot);
        } else {
            // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏ - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            processUserState(update, user, bot);
        }
    }

    private void processCommand(Update update, MyBot bot) {
        String text = update.getMessage().getText();
        Long chatId = update.getMessage().getChatId();

        switch (text) {
            case "/start":
                processStartCommand(update, bot);
                break;
            case "/my_applications":
                processMyApplicationsCommand(update, bot);
                break;
            case "/new_application":
                processNewApplicationCommand(update, bot);
                break;
            case "/queue":
                processQueueCommand(update, bot);
                break;
            case "/rates":
                processRatesCommand(update, bot);
                break;
            default:
                bot.sendMessage(chatId, "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.");
        }
    }

    private void processUserState(Update update, User user, MyBot bot) {
        Long chatId = update.getMessage().getChatId();
        String text = update.getMessage().getText();

        Application application = getOrCreateApplication(user);

        switch (user.getState()) {
            case ENTERING_GET_VALUE:
                processEnteringGetValue(chatId, user, application, text, bot);
                break;
            case ENTERING_GIVE_VALUE:
                processEnteringGiveValue(chatId, user, application, text, bot);
                break;
        }
    }

    private void processCallback(Update update, MyBot bot) {
        String callbackData = update.getCallbackQuery().getData();
        Long chatId = update.getCallbackQuery().getMessage().getChatId();
        Long telegramId = update.getCallbackQuery().getFrom().getId();

        User user = userService.findByTelegramId(telegramId);
        if (user == null) {
            bot.sendMessage(chatId, "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω");
            return;
        }

        Application application = getOrCreateApplication(user);

        if (callbackData.startsWith("get_type_")) {
            processGetTypeSelection(chatId, user, application, callbackData, bot);
        } else if (callbackData.startsWith("give_type_")) {
            processGiveTypeSelection(chatId, user, application, callbackData, bot);
        } else if (callbackData.equals("confirm_application")) {
            processApplicationConfirmation(chatId, user, application, bot);
        } else if (callbackData.equals("cancel_application")) {
            processApplicationCancellation(chatId, user, bot);
        } else if (callbackData.equals("use_calculated_value")) {
            processUseCalculatedValue(chatId, user, application, bot);
        }
    }

    private void processStartCommand(Update update, MyBot bot) {
        Long chatId = update.getMessage().getChatId();
        org.telegram.telegrambots.meta.api.objects.User telegramUser = update.getMessage().getFrom();

        User user = userService.findOrCreateUser(telegramUser);
        user.setState(UserState.START);
        userService.update(user);

        String welcomeText = String.format("""
            üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, %s!
            
            üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
            /my_applications - –º–æ–∏ –∑–∞—è–≤–∫–∏
            /new_application - —Å–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É
            /rates - –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç
            /queue - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞—è–≤–æ–∫
            
            üîë –í–∞—à ID: %d
            """,
                user.getUsername() != null ? user.getUsername() : "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
                user.getId()
        );

        bot.sendMessage(chatId, welcomeText);
    }

    private void processMyApplicationsCommand(Update update, MyBot bot) {
        Long chatId = update.getMessage().getChatId();
        Long telegramId = update.getMessage().getFrom().getId();

        User user = userService.findByTelegramId(telegramId);
        if (user == null) {
            bot.sendMessage(chatId, "‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é /start");
            return;
        }

        List<Application> applications = applicationService.findByUser(user.getId());

        if (applications.isEmpty()) {
            bot.sendMessage(chatId, "üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞—è–≤–æ–∫.\n–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—É—é —Å –ø–æ–º–æ—â—å—é /new_application");
            return;
        }

        StringBuilder response = new StringBuilder("üìã –í–∞—à–∏ –∑–∞—è–≤–∫–∏:\n\n");

        for (int i = 0; i < applications.size(); i++) {
            Application app = applications.get(i);
            response.append(String.format("""
                üÜî –ó–∞—è–≤–∫–∞ #%d
                üí∞ –ü–æ–ª—É—á–∞—é: %.2f %s
                üí∏ –û—Ç–¥–∞—é: %.2f %s
                üìÖ –°–æ–∑–¥–∞–Ω–∞: %s
                --------------------
                """,
                    app.getId(),
                    app.getUserValueGetValue(),
                    app.getUserValueGetType(),
                    app.getUserValueGiveValue(),
                    app.getUserValueGiveType(),
                    app.getCreatedAt().toLocalDate()
            ));
        }

        bot.sendMessage(chatId, response.toString());
    }

    private void processNewApplicationCommand(Update update, MyBot bot) {
        Long chatId = update.getMessage().getChatId();
        Long telegramId = update.getMessage().getFrom().getId();

        User user = userService.findByTelegramId(telegramId);
        if (user == null) {
            bot.sendMessage(chatId, "‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é /start");
            return;
        }

        // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –∑–∞—è–≤–∫—É
        Application application = getOrCreateApplication(user);

        // –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏
        user.setState(UserState.CHOOSING_GET_TYPE);
        userService.update(user);

        InlineKeyboardMarkup keyboard = createCurrencyKeyboardWithCancel("get_type");
        bot.sendMessageWithKeyboard(chatId,
                "üìù –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–∏!\n\n" +
                        "üíé –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É/—Ç–∏–ø, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –ü–û–õ–£–ß–ò–¢–¨:",
                keyboard);
    }

    private void processQueueCommand(Update update, MyBot bot) {
        Long chatId = update.getMessage().getChatId();

        List<Application> allApplications = applicationService.findAll();
        int queueSize = allApplications.size();

        String message = String.format("""
            üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞—è–≤–æ–∫:
            
            üìà –í—Å–µ–≥–æ –∑–∞—è–≤–æ–∫ –≤ —Å–∏—Å—Ç–µ–º–µ: %d
            üë• –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: %d
            
            üí° –°–æ–∑–¥–∞–π—Ç–µ –∑–∞—è–≤–∫—É: /new_application
            """, queueSize, getUniqueUsersCount(allApplications));

        bot.sendMessage(chatId, message);
    }

    private void processEnteringGetValue(Long chatId, User user, Application application, String text, MyBot bot) {
        try {
            double value = Double.parseDouble(text);
            application.setUserValueGetValue(value);
            user.setState(UserState.CHOOSING_GIVE_TYPE);
            userService.update(user);

            InlineKeyboardMarkup keyboard = createCurrencyKeyboardWithCancel("give_type");
            bot.sendMessageWithKeyboard(chatId, "üíé –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É/—Ç–∏–ø, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –û–¢–î–ê–¢–¨:", keyboard);
        } catch (NumberFormatException e) {
            bot.sendMessage(chatId, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ:");
        }
    }

    private void processEnteringGiveValue(Long chatId, User user, Application application, String text, MyBot bot) {
        try {
            double value = Double.parseDouble(text);
            application.setUserValueGiveValue(value);
            user.setState(UserState.CONFIRMING_APPLICATION);
            userService.update(user);

            String confirmationText = String.format("""
                ‚úÖ –ó–∞—è–≤–∫–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Å–æ–∑–¥–∞–Ω–∏—é!
                
                üí∞ –ü–æ–ª—É—á–∞—é: %.2f %s
                üí∏ –û—Ç–¥–∞—é: %.2f %s
                
                –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏?
                """,
                    application.getUserValueGetValue(),
                    application.getUserValueGetType().getDisplayName(),
                    application.getUserValueGiveValue(),
                    application.getUserValueGiveType().getDisplayName()
            );

            InlineKeyboardMarkup keyboard = createConfirmationKeyboard();
            bot.sendMessageWithKeyboard(chatId, confirmationText, keyboard);
        } catch (NumberFormatException e) {
            bot.sendMessage(chatId, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ:");
        }
    }

    private void processGetTypeSelection(Long chatId, User user, Application application, String callbackData, MyBot bot) {
        String typeName = callbackData.replace("get_type_", "");
        try {
            ValueType valueType = ValueType.valueOf(typeName);
            application.setUserValueGetType(valueType);
            user.setState(UserState.ENTERING_GET_VALUE);
            userService.update(user);

            bot.sendMessage(chatId, "üíé –í—ã –≤—ã–±—Ä–∞–ª–∏: " + valueType.getDisplayName() +
                    "\n\n–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É/–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –ü–û–õ–£–ß–ò–¢–¨:");
        } catch (IllegalArgumentException e) {
            bot.sendMessage(chatId, "‚ùå –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞");
        }
    }

    private void processGiveTypeSelection(Long chatId, User user, Application application, String callbackData, MyBot bot) {
        String typeName = callbackData.replace("give_type_", "");
        try {
            ValueType giveType = ValueType.valueOf(typeName);
            application.setUserValueGiveType(giveType);

            // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—É—é —Å—É–º–º—É –æ—Ç–¥–∞—á–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫—É—Ä—Å–æ–≤
            Double calculatedGiveValue = calculateExchange(
                    application.getUserValueGetType(),
                    application.getUserValueGetValue(),
                    giveType
            );

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–∞—Å—á–µ—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
            Map<String, Object> userCalcData = calculatorData.computeIfAbsent(user.getId(), k -> new HashMap<>());
            userCalcData.put("calculatedGiveValue", calculatedGiveValue);

            String message = String.format("""
                üíé –í—ã –≤—ã–±—Ä–∞–ª–∏: %s
                
                üßÆ –ù–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–∏—Ö –∫—É—Ä—Å–æ–≤:
                üí∞ –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è %.2f %s
                üí∏ –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –æ—Ç–¥–∞—Ç—å: %.2f %s
                
                –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –û–¢–î–ê–¢–¨:
                (–∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—É—é)
                """,
                    giveType.getDisplayName(),
                    application.getUserValueGetValue(),
                    application.getUserValueGetType().getDisplayName(),
                    calculatedGiveValue,
                    giveType.getDisplayName()
            );

            InlineKeyboardMarkup keyboard = createCalculatorKeyboard();
            bot.sendMessageWithKeyboard(chatId, message, keyboard);

            user.setState(UserState.ENTERING_GIVE_VALUE);
            userService.update(user);

        } catch (IllegalArgumentException e) {
            bot.sendMessage(chatId, "‚ùå –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞");
        }
    }

    private void processUseCalculatedValue(Long chatId, User user, Application application, MyBot bot) {
        Map<String, Object> userCalcData = calculatorData.get(user.getId());
        if (userCalcData != null) {
            Double calculatedValue = (Double) userCalcData.get("calculatedGiveValue");
            if (calculatedValue != null) {
                application.setUserValueGiveValue(calculatedValue);
                user.setState(UserState.CONFIRMING_APPLICATION);
                userService.update(user);

                String confirmationText = String.format("""
                    ‚úÖ –ó–∞—è–≤–∫–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Å–æ–∑–¥–∞–Ω–∏—é!
                    
                    üí∞ –ü–æ–ª—É—á–∞—é: %.2f %s
                    üí∏ –û—Ç–¥–∞—é: %.2f %s
                    
                    –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏?
                    """,
                        application.getUserValueGetValue(),
                        application.getUserValueGetType().getDisplayName(),
                        application.getUserValueGiveValue(),
                        application.getUserValueGiveType().getDisplayName()
                );

                InlineKeyboardMarkup keyboard = createConfirmationKeyboard();
                bot.sendMessageWithKeyboard(chatId, confirmationText, keyboard);
                return;
            }
        }

        bot.sendMessage(chatId, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ä–∞—Å—á–µ—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤—Ä—É—á–Ω—É—é:");
    }

    private Double calculateExchange(ValueType getType, Double getValue, ValueType giveType) {
        try {
            Double exchangeRate = exchangeRateCache.getExchangeRate(getType, giveType);
            if (exchangeRate != null) {
                return getValue * exchangeRate;
            }
        } catch (Exception e) {
            // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback
        }

        // Fallback –ª–æ–≥–∏–∫–∞
        return getFallbackExchange(getType, getValue, giveType);
    }

    private Double getFallbackExchange(ValueType getType, Double getValue, ValueType giveType) {
        // –£–ø—Ä–æ—â–µ–Ω–Ω—ã–µ –∫—É—Ä—Å—ã –¥–ª—è fallback
        Map<ValueType, Double> usdRates = Map.of(
                ValueType.BTC, 45000.0,
                ValueType.ETH, 3000.0,
                ValueType.USDT, 1.0,
                ValueType.USDC, 1.0,
                ValueType.RUB, 0.011,
                ValueType.EUR, 1.08
        );

        Double getUsdRate = usdRates.get(getType);
        Double giveUsdRate = usdRates.get(giveType);

        if (getUsdRate != null && giveUsdRate != null && giveUsdRate != 0) {
            return (getValue * getUsdRate) / giveUsdRate;
        }

        return getValue; // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    }

    private void processApplicationConfirmation(Long chatId, User user, Application application, MyBot bot) {
        try {
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ
            application.setTitle("–û–±–º–µ–Ω " + application.getUserValueGetType() + " –Ω–∞ " + application.getUserValueGiveType());
            application.setDescription("–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–Ω–Ω–∞—è –∑–∞—è–≤–∫–∞");

            applicationService.create(application);
            user.setState(UserState.START);
            userService.update(user);
            temporaryApplications.remove(user.getId());
            calculatorData.remove(user.getId());

            String successText = String.format("""
                ‚úÖ –ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!
                
                üí∞ –ü–æ–ª—É—á–∞—é: %.2f %s
                üí∏ –û—Ç–¥–∞—é: %.2f %s
                
                üÜî ID –∑–∞—è–≤–∫–∏: %d
                """,
                    application.getUserValueGetValue(),
                    application.getUserValueGetType().getDisplayName(),
                    application.getUserValueGiveValue(),
                    application.getUserValueGiveType().getDisplayName(),
                    application.getId()
            );

            bot.sendMessage(chatId, successText);
        } catch (Exception e) {
            bot.sendMessage(chatId, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏");
        }
    }

    private void processApplicationCancellation(Long chatId, User user, MyBot bot) {
        user.setState(UserState.START);
        userService.update(user);
        temporaryApplications.remove(user.getId());
        calculatorData.remove(user.getId());

        String mainMenuText = """
            ‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.
            
            –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.
            –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–æ–º–∞–Ω–¥.
            """;
        bot.sendMessage(chatId, mainMenuText);
    }

    private Application getOrCreateApplication(User user) {
        return temporaryApplications.computeIfAbsent(user.getId(), k -> {
            Application app = new Application();
            app.setUser(user);
            return app;
        });
    }

    private long getUniqueUsersCount(List<Application> applications) {
        return applications.stream()
                .map(Application::getUser)
                .distinct()
                .count();
    }

    private void processRatesCommand(Update update, MyBot bot) {
        Long chatId = update.getMessage().getChatId();

        try {
            StringBuilder ratesMessage = new StringBuilder("üí± –¢–µ–∫—É—â–∏–µ –∫—É—Ä—Å—ã –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç:\n\n");

            // BTC
            Map<String, Double> btcPrices = cryptoPriceService.getMultiplePrices("BTC");
            ratesMessage.append("‚Çø Bitcoin (BTC):\n");
            ratesMessage.append(String.format("  üíµ %.2f USD\n", btcPrices.get("USD")));
            ratesMessage.append(String.format("  üí∂ %.2f EUR\n", btcPrices.get("EUR")));
            ratesMessage.append(String.format("  üí∑ %.0f RUB\n\n", btcPrices.get("RUB")));

            // ETH
            Map<String, Double> ethPrices = cryptoPriceService.getMultiplePrices("ETH");
            ratesMessage.append("Œû Ethereum (ETH):\n");
            ratesMessage.append(String.format("  üíµ %.2f USD\n", ethPrices.get("USD")));
            ratesMessage.append(String.format("  üí∂ %.2f EUR\n", ethPrices.get("EUR")));
            ratesMessage.append(String.format("  üí∑ %.0f RUB\n\n", ethPrices.get("RUB")));

            // USDT
            Map<String, Double> usdtPrices = cryptoPriceService.getMultiplePrices("USDT");
            ratesMessage.append("üíµ Tether (USDT):\n");
            ratesMessage.append(String.format("  üíµ %.4f USD\n", usdtPrices.get("USD")));
            ratesMessage.append(String.format("  üí∂ %.4f EUR\n", usdtPrices.get("EUR")));
            ratesMessage.append(String.format("  üí∑ %.4f RUB\n\n", usdtPrices.get("RUB")));

            ratesMessage.append("üïí –ö—É—Ä—Å—ã –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É\n");
            ratesMessage.append("üìù –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏: /new_application");

            bot.sendMessage(chatId, ratesMessage.toString());
        } catch (Exception e) {
            bot.sendMessage(chatId, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–µ –∫—É—Ä—Å—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
        }
    }

    // –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    private InlineKeyboardMarkup createCurrencyKeyboardWithCancel(String callbackPrefix) {
        InlineKeyboardMarkup markup = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> rows = new ArrayList<>();

        ValueType[] types = ValueType.values();
        for (int i = 0; i < types.length; i += 2) {
            List<InlineKeyboardButton> row = new ArrayList<>();

            ValueType type1 = types[i];
            InlineKeyboardButton button1 = new InlineKeyboardButton();
            button1.setText(type1.getDisplayName());
            button1.setCallbackData(callbackPrefix + "_" + type1.name());
            row.add(button1);

            if (i + 1 < types.length) {
                ValueType type2 = types[i + 1];
                InlineKeyboardButton button2 = new InlineKeyboardButton();
                button2.setText(type2.getDisplayName());
                button2.setCallbackData(callbackPrefix + "_" + type2.name());
                row.add(button2);
            }

            rows.add(row);
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã
        List<InlineKeyboardButton> cancelRow = new ArrayList<>();
        InlineKeyboardButton cancelButton = new InlineKeyboardButton();
        cancelButton.setText("‚ùå –û—Ç–º–µ–Ω–∞");
        cancelButton.setCallbackData("cancel_application");
        cancelRow.add(cancelButton);
        rows.add(cancelRow);

        markup.setKeyboard(rows);
        return markup;
    }

    private InlineKeyboardMarkup createConfirmationKeyboard() {
        InlineKeyboardMarkup keyboard = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> rows = new ArrayList<>();

        List<InlineKeyboardButton> row1 = new ArrayList<>();
        InlineKeyboardButton confirmButton = new InlineKeyboardButton();
        confirmButton.setText("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å");
        confirmButton.setCallbackData("confirm_application");
        row1.add(confirmButton);

        InlineKeyboardButton cancelButton = new InlineKeyboardButton();
        cancelButton.setText("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å");
        cancelButton.setCallbackData("cancel_application");
        row1.add(cancelButton);

        rows.add(row1);
        keyboard.setKeyboard(rows);
        return keyboard;
    }

    private InlineKeyboardMarkup createCalculatorKeyboard() {
        InlineKeyboardMarkup keyboard = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> rows = new ArrayList<>();

        List<InlineKeyboardButton> row1 = new ArrayList<>();
        InlineKeyboardButton useCalculatedButton = new InlineKeyboardButton();
        useCalculatedButton.setText("‚úÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ä–∞—Å—á–µ—Ç");
        useCalculatedButton.setCallbackData("use_calculated_value");
        row1.add(useCalculatedButton);

        List<InlineKeyboardButton> row2 = new ArrayList<>();
        InlineKeyboardButton cancelButton = new InlineKeyboardButton();
        cancelButton.setText("‚ùå –û—Ç–º–µ–Ω–∞");
        cancelButton.setCallbackData("cancel_application");
        row2.add(cancelButton);

        rows.add(row1);
        rows.add(row2);
        keyboard.setKeyboard(rows);
        return keyboard;
    }
}