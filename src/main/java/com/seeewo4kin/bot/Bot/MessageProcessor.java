package com.seeewo4kin.bot.Bot;

import com.seeewo4kin.bot.Config.AdminConfig;
import com.seeewo4kin.bot.Config.CommissionConfig;
import com.seeewo4kin.bot.Entity.Application;
import com.seeewo4kin.bot.Entity.Coupon;
import com.seeewo4kin.bot.Entity.ReferralCode;
import com.seeewo4kin.bot.Entity.User;
import com.seeewo4kin.bot.Enums.ApplicationStatus;
import com.seeewo4kin.bot.Enums.UserState;
import com.seeewo4kin.bot.Enums.ValueType;
import com.seeewo4kin.bot.ValueGettr.CryptoPriceService;
import com.seeewo4kin.bot.service.*;
import org.springframework.stereotype.Service;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.ReplyKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.KeyboardRow;

import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;
import java.util.stream.Collectors;

@Service
public class MessageProcessor {
    private final UserService userService;
    private final ApplicationService applicationService;
    private final CryptoPriceService cryptoPriceService;
    private final CaptchaService captchaService;
    private final CouponService couponService;
    private final AdminConfig adminConfig;
    private final CommissionService commissionService;
    private final ReferralService referralService;
    private final CommissionConfig commissionConfig;

    private final Map<Long, Application> temporaryApplications = new ConcurrentHashMap<>();
    private final Map<Long, String> currentOperation = new ConcurrentHashMap<>();
    private final Map<Long, Integer> lastMessageId = new ConcurrentHashMap<>();
    private final Map<Long, Long> selectedApplication = new ConcurrentHashMap<>();

    public MessageProcessor(UserService userService,
                            ApplicationService applicationService,
                            CryptoPriceService cryptoPriceService,
                            CaptchaService captchaService,
                            CouponService couponService,
                            AdminConfig adminConfig,
                            CommissionService commissionService,
                            ReferralService referralService,
                            CommissionConfig commissionConfig) {
        this.userService = userService;
        this.applicationService = applicationService;
        this.cryptoPriceService = cryptoPriceService;
        this.captchaService = captchaService;
        this.couponService = couponService;
        this.adminConfig = adminConfig;
        this.commissionService = commissionService;
        this.referralService = referralService;
        this.commissionConfig = commissionConfig;
    }


    public void processUpdate(Update update, MyBot bot) {
        // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        if (update.hasMessage()) {
            Long chatId = update.getMessage().getChatId();
            deletePreviousBotMessage(chatId, bot);
        }

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ callback'–æ–≤ –æ—Ç –∫–Ω–æ–ø–æ–∫
        if (update.hasCallbackQuery()) {
            processCallback(update, bot);
            return;
        }

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        if (update.hasMessage() && update.getMessage().hasText()) {
            processTextMessage(update, bot);
        }
    }

    private void deletePreviousBotMessage(Long chatId, MyBot bot) {
        Integer previousMessageId = lastMessageId.get(chatId);
        if (previousMessageId != null) {
            bot.deleteMessage(chatId, previousMessageId);
        }
    }

    private void processTextMessage(Update update, MyBot bot) {
        String text = update.getMessage().getText();
        Long chatId = update.getMessage().getChatId();
        Long telegramId = update.getMessage().getFrom().getId();

        // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        bot.deleteMessage(chatId, update.getMessage().getMessageId());

        User user = userService.findByTelegramId(telegramId);

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã –≤ –ª—é–±–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        if (text.equalsIgnoreCase("–æ—Ç–º–µ–Ω–∞") || text.equalsIgnoreCase("cancel") ||
                text.equals("/cancel") || text.equals("üíé –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")) {
            // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞
            deletePreviousBotMessage(chatId, bot);
            processMainMenu(chatId, user, bot);
            return;
        }

        if (text.equals("üîô –ù–∞–∑–∞–¥")) {
            handleBackButton(chatId, user, bot);
            return;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–æ–π –∑–∞—è–≤–∫–∏
        if (text.startsWith("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É #")) {
            try {
                Long applicationId = Long.parseLong(text.replace("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É #", "").trim());
                cancelUserApplication(chatId, user, applicationId, bot);
                return;
            } catch (NumberFormatException e) {
                // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—ã—á–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
            }
        }

        if (text.equals("üìû –ù–∞–ø–∏—Å–∞—Ç—å –æ–ø–µ—Ä–∞—Ç–æ—Ä—É")) {
            String message = """
                    üìû –°–≤—è–∑—å —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º:
                    
                    üë§ –û–ø–µ—Ä–∞—Ç–æ—Ä: @cosanostra_support
                    ‚è∞ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: 24/7
                    üí¨ –ù–∞–ø–∏—à–∏—Ç–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ ID –≤–∞—à–µ–π –∑–∞—è–≤–∫–∏
                    
                    ‚ö†Ô∏è –ü–æ–º–Ω–∏—Ç–µ: –æ–ø–µ—Ä–∞—Ç–æ—Ä –ù–ò–ö–û–ì–î–ê –Ω–µ –ø–∏—à–µ—Ç –ø–µ—Ä–≤—ã–º!
                    """;
            lastMessageId.put(chatId, bot.sendMessageWithKeyboard(chatId, message, createMainMenuKeyboard(user)));
            return;
        }

        if (user == null || user.getState() == UserState.START) {
            processCommand(update, bot);
        } else {
            processUserState(update, user, bot);
        }
    }

    private void handleBackButton(Long chatId, User user, MyBot bot) {
        switch (user.getState()) {
            case BUY_MENU:
            case SELL_MENU:
            case OTHER_MENU:
            case REFERRAL_MENU:
            case ADMIN_MAIN_MENU:
                processMainMenu(chatId, user, bot);
                break;
            case ENTERING_BUY_AMOUNT_RUB:
            case ENTERING_BUY_AMOUNT_BTC:
                user.setState(UserState.BUY_MENU);
                userService.update(user);
                showBuyMenu(chatId, bot);
                break;
            case ENTERING_SELL_AMOUNT:
                user.setState(UserState.SELL_MENU);
                userService.update(user);
                showSellMenu(chatId, bot);
                break;
            case APPLYING_COUPON:
                // –í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é –≤–≤–æ–¥–∞ —Å—É–º–º—ã
                if ("BUY_RUB".equals(currentOperation.get(user.getId())) ||
                        "BUY_BTC".equals(currentOperation.get(user.getId()))) {
                    user.setState(UserState.BUY_MENU);
                    showBuyMenu(chatId, bot);
                } else {
                    user.setState(UserState.SELL_MENU);
                    showSellMenu(chatId, bot);
                }
                break;
            case ADMIN_VIEWING_ALL_APPLICATIONS:
            case ADMIN_COMMISSION_SETTINGS:
                user.setState(UserState.ADMIN_MAIN_MENU);
                userService.update(user);
                showAdminMainMenu(chatId, bot);
                break;
            case ADMIN_VIEWING_APPLICATION_DETAILS:
                user.setState(UserState.ADMIN_VIEWING_ALL_APPLICATIONS);
                userService.update(user);
                processAdminViewingAllApplications(chatId, user, bot);
                break;
            case CREATING_REFERRAL_CODE:
            case ENTERING_REFERRAL_CODE:
                user.setState(UserState.REFERRAL_MENU);
                userService.update(user);
                showReferralMenu(chatId, user, bot);
                break;
            default:
                processMainMenu(chatId, user, bot);
        }
    }

    private void processCommand(Update update, MyBot bot) {
        String text = update.getMessage().getText();
        Long chatId = update.getMessage().getChatId();
        Long telegramId = update.getMessage().getFrom().getId();

        User user = userService.findByTelegramId(telegramId);
        if (user == null) {
            user = userService.findOrCreateUser(update.getMessage().getFrom());
        }

        if ("/start".equals(text)) {
            processStartCommand(update, bot);
        } else {
            bot.sendMessageWithKeyboard(chatId, "‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞", createMainMenuKeyboard(user));
        }
    }

    private void processUserState(Update update, User user, MyBot bot) {
        Long chatId = update.getMessage().getChatId();
        String text = update.getMessage().getText();

        switch (user.getState()) {
            case START:
            case CAPTCHA_CHECK:
                break;
            case MAIN_MENU:
                processMainMenuCommand(chatId, user, text, bot);
                break;
            case BUY_MENU:
                processBuyMenu(chatId, user, text, bot);
                break;
            case SELL_MENU:
                processSellMenu(chatId, user, text, bot);
                break;
            case ENTERING_BUY_AMOUNT_RUB:
                processEnteringBuyAmountRub(chatId, user, text, bot);
                break;
            case ENTERING_BUY_AMOUNT_BTC:
                processEnteringBuyAmountBtc(chatId, user, text, bot);
                break;
            case ENTERING_SELL_AMOUNT:
                processEnteringSellAmount(chatId, user, text, bot);
                break;
            case CONFIRMING_APPLICATION:
                processConfirmingApplication(chatId, user, text, bot);
                break;
            case APPLYING_COUPON:
                processApplyingCoupon(chatId, user, text, bot);
                break;
            case APPLYING_COUPON_FINAL:
                processApplyingCouponFinal(chatId, user, text, bot);
                break;
            case VIEWING_APPLICATIONS:
                processViewingApplications(chatId, user, bot);
                break;
            case VIEWING_COUPONS:
                processViewingCoupons(chatId, user, bot);
                break;
            case REFERRAL_MENU:
                processReferralMenu(chatId, user, text, bot);
                break;
            case CREATING_REFERRAL_CODE:
                processCreatingReferralCode(chatId, user, text, bot);
                break;
            case ENTERING_REFERRAL_CODE:
                processEnteringReferralCode(chatId, user, text, bot);
                break;
            case OTHER_MENU:
                processOtherMenu(chatId, user, text, bot);
                break;
            case CALCULATOR_MENU:
                processCalculatorMenu(chatId, user, text, bot);
                break;
            case CALCULATOR_BUY:
                processCalculatorBuy(chatId, user, text, bot);
                break;
            case CALCULATOR_SELL:
                processCalculatorSell(chatId, user, text, bot);
                break;
            case CONFIRMING_VIP:
                processVipConfirmation(chatId, user, text, bot);
                break;
            case ENTERING_WALLET:
                processEnteringWallet(chatId, user, text, bot);
                break;

            // –ê–¥–º–∏–Ω—Å–∫–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            case ADMIN_MAIN_MENU:
                processAdminMainMenu(chatId, user, text, bot);
                break;
            case ADMIN_VIEW_ALL_APPLICATIONS:
                if (text.equals("üîô –ù–∞–∑–∞–¥")) {
                    user.setState(UserState.ADMIN_MAIN_MENU);
                    userService.update(user);
                    showAdminMainMenu(chatId, bot);
                } else if (text.equals("üìä –ê–∫—Ç–∏–≤–Ω—ã–µ")) {
                    user.setState(UserState.ADMIN_VIEW_ACTIVE_APPLICATIONS);
                    userService.update(user);
                    showActiveApplications(chatId, user, bot);
                } else if (text.equals("‚è≠Ô∏è –°–ª–µ–¥—É—é—â–∞—è")) {
                    processNextApplication(chatId, user, bot);
                } else {
                    showAllApplications(chatId, user, bot);
                }
                break;
            case ADMIN_VIEW_ACTIVE_APPLICATIONS:
                if (text.equals("üîô –ù–∞–∑–∞–¥")) {
                    user.setState(UserState.ADMIN_MAIN_MENU);
                    userService.update(user);
                    showAdminMainMenu(chatId, bot);
                } else {
                    processAdminActiveApplicationsSelection(chatId, user, text, bot);
                }
                break;
            case ADMIN_VIEWING_ALL_APPLICATIONS:
                processAdminApplicationSelection(chatId, user, text, bot);
                break;
            case ADMIN_VIEWING_APPLICATION_DETAILS:
                processAdminApplicationActions(chatId, user, text, bot);
                break;
            case ADMIN_COMMISSION_SETTINGS:
                processAdminCommissionSettings(chatId, user, text, bot);
                break;
            case ADMIN_VIEW_USER_DETAILS:
                processAdminUserSearch(chatId, user, text, bot);
                break;
            case ADMIN_CREATE_COUPON:
                processCreateCoupon(chatId, user, text, bot);
                break;
        }
    }

    private void processCalculatorSell(Long chatId, User user, String text, MyBot bot) {
        if (text.equals("üîô –ù–∞–∑–∞–¥")) {
            user.setState(UserState.CALCULATOR_MENU);
            userService.update(user);
            showCalculatorMenu(chatId, user, bot);
            return;
        }

        try {
            double btcAmount = Double.parseDouble(text);

            if (btcAmount <= 0) {
                lastMessageId.put(chatId, bot.sendMessageWithKeyboard(chatId,
                        "‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0", createCalculatorBackKeyboard()));
                return;
            }

            double btcPrice = cryptoPriceService.getCurrentPrice("BTC", "RUB");
            double rubAmount = btcAmount * btcPrice;

            // –î–ª—è –ø—Ä–æ–¥–∞–∂–∏ –∫–æ–º–∏—Å—Å–∏—è —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –æ—Ç —Å—É–º–º—ã –ø—Ä–æ–¥–∞–∂–∏
            double commission = commissionService.calculateCommission(rubAmount);
            double totalReceived = rubAmount - commission; // –ü—Ä–∏ –ø—Ä–æ–¥–∞–∂–µ –∫–æ–º–∏—Å—Å–∏—è –≤—ã—á–∏—Ç–∞–µ—Ç—Å—è

            String calculation = String.format("""
                            üßÆ –†–∞—Å—á–µ—Ç –ø—Ä–æ–¥–∞–∂–∏:
                            
                            ‚Çø –ü—Ä–æ–¥–∞–µ—Ç–µ: %.8f BTC
                            üí∞ –°—É–º–º–∞ –ø—Ä–æ–¥–∞–∂–∏: %.2f ‚ÇΩ
                            üí∏ –ö–æ–º–∏—Å—Å–∏—è: %.2f ‚ÇΩ (%.1f%%)
                            üíµ –í—ã –ø–æ–ª—É—á–∏—Ç–µ: %.2f ‚ÇΩ
                            
                            –ö—É—Ä—Å BTC: %.2f ‚ÇΩ
                            
                            üí° –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –ø—Ä–∏ —Ä–µ–∞–ª—å–Ω–æ–π –ø—Ä–æ–¥–∞–∂–µ –±—É–¥–µ—Ç —É—á—Ç–µ–Ω VIP-–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∏ –∫—É–ø–æ–Ω—ã
                            """,
                    btcAmount,
                    rubAmount,
                    commission,
                    commissionService.getCommissionPercent(rubAmount),
                    totalReceived,
                    btcPrice
            );

            lastMessageId.put(chatId, bot.sendMessageWithKeyboard(chatId, calculation, createCalculatorBackKeyboard()));

        } catch (NumberFormatException e) {
            lastMessageId.put(chatId, bot.sendMessageWithKeyboard(chatId,
                    "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ", createCalculatorBackKeyboard()));
        }
    }

    private void processConfirmingApplication(Long chatId, User user, String text, MyBot bot) {
        Application application = temporaryApplications.get(user.getId());

        if (application == null) {
            processMainMenu(chatId, user, bot);
            return;
        }

        switch (text) {
            case "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å":
                createApplicationFinal(chatId, user, application, bot);
                break;
            case "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å":
                temporaryApplications.remove(user.getId());
                String cancelMessage = "‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.";
                lastMessageId.put(chatId, bot.sendMessageWithKeyboard(chatId, cancelMessage, createMainMenuKeyboard(user)));
                user.setState(UserState.MAIN_MENU);
                userService.update(user);
                break;
            case "üîô –ù–∞–∑–∞–¥":
                user.setState(UserState.APPLYING_COUPON_FINAL);
                userService.update(user);
                processApplyingCouponFinal(chatId, user, "üîô –ù–∞–∑–∞–¥", bot);
                break;
            default:
                lastMessageId.put(chatId, bot.sendMessageWithKeyboard(chatId, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏", createFinalConfirmationKeyboard()));
        }
    }

    private void createApplicationFinal(Long chatId, User user, Application application, MyBot bot) {
        // –î–æ—Ä–∞—Å—á–∏—Ç—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º
        if (application.getUserValueGetType() == ValueType.BTC) {
            // –ü–æ–∫—É–ø–∫–∞ BTC
            double rubAmount = application.getUserValueGiveValue();
            double btcPrice = cryptoPriceService.getCurrentPrice("BTC", "RUB");
            double btcAmount = rubAmount / btcPrice;
            application.setCalculatedGetValue(btcAmount);
        } else {
            // –ü—Ä–æ–¥–∞–∂–∞ BTC
            double btcAmount = application.getUserValueGiveValue();
            double btcPrice = cryptoPriceService.getCurrentPrice("BTC", "RUB");
            double rubAmount = btcAmount * btcPrice;
            double commission = commissionService.calculateCommission(rubAmount);
            application.setCalculatedGetValue(rubAmount - commission);
        }

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞—è–≤–∫—É —Å–Ω–∞—á–∞–ª–∞ –±–µ–∑ messageId
        application.setStatus(ApplicationStatus.FREE);
        applicationService.create(application);
        temporaryApplications.remove(user.getId());

        // –§–æ—Ä–º–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞—è–≤–∫–æ–π
        String applicationMessage = String.format("""
                        ‚úÖ –ó–∞—è–≤–∫–∞ –Ω–∞ %s —Å–æ–∑–¥–∞–Ω–∞!
                        üìù ID: %s
                        
                        %s –û—Ç–¥–∞–µ—Ç–µ: %.8f %s
                        üí∞ –ü–æ–ª—É—á–∞–µ—Ç–µ: %.2f %s
                        %s: %s
                        %s
                        üï∞Ô∏è –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: –¥–æ %s
                        
                        –°—Ç–∞—Ç—É—Å: %s
                        
                        üì© –ü–µ—Ä–µ—à–ª–∏—Ç–µ —ç—Ç—É –∑–∞—è–≤–∫—É –æ–ø–µ—Ä–∞—Ç–æ—Ä—É: @cosanostra_support
                        """,
                application.getUserValueGetType() == ValueType.BTC ? "–ø–æ–∫—É–ø–∫–∏" : "–ø—Ä–æ–¥–∞–∂–∏",
                application.getUuid().substring(0, 8),
                application.getUserValueGetType() == ValueType.BTC ? "üí∏" : "‚Çø",
                application.getUserValueGetType() == ValueType.BTC ?
                        application.getCalculatedGiveValue() : application.getUserValueGiveValue(),
                application.getUserValueGetType() == ValueType.BTC ? "‚ÇΩ" : "BTC",
                application.getUserValueGetType() == ValueType.BTC ?
                        application.getCalculatedGetValue() : application.getCalculatedGetValue(),
                application.getUserValueGetType() == ValueType.BTC ? "BTC" : "‚ÇΩ",
                application.getUserValueGetType() == ValueType.BTC ? "üîê –ö–æ—à–µ–ª–µ–∫ BTC" : "üí≥ –†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –≤—ã–ø–ª–∞—Ç—ã",
                application.getWalletAddress(),
                application.getIsVip() ? "üëë VIP-–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç" : "üîπ –û–±—ã—á–Ω—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç",
                application.getFormattedExpiresAt(),
                application.getStatus().getDisplayName()
        );

        application.setStatus(ApplicationStatus.FREE);
        applicationService.create(application);
        temporaryApplications.remove(user.getId());

        // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        String applicationMessagee = formatApplicationMessage(application);

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞—è–≤–∫–æ–π –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ ID –≤ –∑–∞—è–≤–∫–µ
        int messageId = bot.sendMessageWithInlineKeyboard(chatId, applicationMessagee, createApplicationInlineKeyboard(application.getId()));
        application.setTelegramMessageId(messageId);
        applicationService.update(application);

        user.setState(UserState.MAIN_MENU);
        userService.update(user);
    }

    private String formatApplicationMessage(Application application) {
        String operationType = application.getUserValueGetType() == ValueType.BTC ? "–ø–æ–∫—É–ø–∫–∏" : "–ø—Ä–æ–¥–∞–∂–∏";
        String walletLabel = application.getUserValueGetType() == ValueType.BTC ? "üîê –ö–æ—à–µ–ª–µ–∫ BTC" : "üí≥ –†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –≤—ã–ø–ª–∞—Ç—ã";

        return String.format("""
                        ‚úÖ –ó–∞—è–≤–∫–∞ –Ω–∞ %s —Å–æ–∑–¥–∞–Ω–∞!
                        üìù ID: %s
                        
                        %s –û—Ç–¥–∞–µ—Ç–µ: %.8f %s
                        üí∞ –ü–æ–ª—É—á–∞–µ—Ç–µ: %.2f %s
                        %s: %s
                        %s
                        üï∞Ô∏è –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: –¥–æ %s
                        
                        –°—Ç–∞—Ç—É—Å: %s
                        """,
                operationType,
                application.getUuid().substring(0, 8),
                application.getUserValueGetType() == ValueType.BTC ? "üí∏" : "‚Çø",
                application.getUserValueGetType() == ValueType.BTC ?
                        application.getCalculatedGiveValue() : application.getUserValueGiveValue(),
                application.getUserValueGetType() == ValueType.BTC ? "‚ÇΩ" : "BTC",
                application.getUserValueGetType() == ValueType.BTC ?
                        application.getCalculatedGetValue() : application.getCalculatedGetValue(),
                application.getUserValueGetType() == ValueType.BTC ? "BTC" : "‚ÇΩ",
                walletLabel,
                application.getWalletAddress(),
                application.getIsVip() ? "üëë VIP-–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç" : "üîπ –û–±—ã—á–Ω—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç",
                application.getFormattedExpiresAt(),
                application.getStatus().getDisplayName()
        );
    }

    private void updateApplicationMessage(Long chatId, Application application, MyBot bot) {
        if (application.getTelegramMessageId() == null) return;

        String updatedMessage = formatApplicationMessage(application);
        InlineKeyboardMarkup keyboard = createApplicationInlineKeyboard(application.getId());

        try {
            bot.editMessageText(chatId, application.getTelegramMessageId(), updatedMessage, keyboard);
        } catch (Exception e) {
            System.err.println("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏: " + e.getMessage());
        }
    }


    private void processAdminApplicationActions(Long chatId, User user, String text, MyBot bot) {
        Long applicationId = selectedApplication.get(user.getId());
        if (applicationId == null) {
            processAdminViewingAllApplications(chatId, user, bot);
            return;
        }

        Application application = applicationService.find(applicationId);
        if (application == null) {
            lastMessageId.put(chatId, bot.sendMessageWithKeyboard(chatId, "‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", createAdminMainMenuKeyboard()));
            return;
        }

        switch (text) {
            case "üü° –í —Ä–∞–±–æ—Ç—É":
                application.setStatus(ApplicationStatus.IN_WORK);
                break;
            case "‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ": // –ó–ê–ú–ï–ù–ê
                application.setStatus(ApplicationStatus.COMPLETED);
                updateUserStatistics(application);
                referralService.processReferralReward(application);
                // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                if (application.getTelegramMessageId() != null) {
                    bot.deleteMessage(application.getUser().getTelegramId(), application.getTelegramMessageId());
                }
                break;
            case "üî¥ –û—Ç–º–µ–Ω–∏—Ç—å":
                application.setStatus(ApplicationStatus.CANCELLED);
                // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                if (application.getTelegramMessageId() != null) {
                    bot.deleteMessage(application.getUser().getTelegramId(), application.getTelegramMessageId());
                }
                break;
            case "üü¢ –°–≤–æ–±–æ–¥–Ω–∞":
                application.setStatus(ApplicationStatus.FREE);
                break;
            case "üìã –í—Å–µ –∑–∞—è–≤–∫–∏":
                user.setState(UserState.ADMIN_VIEWING_ALL_APPLICATIONS);
                userService.update(user);
                processAdminViewingAllApplications(chatId, user, bot);
                return;
            case "üîô –ù–∞–∑–∞–¥":
                user.setState(UserState.ADMIN_VIEWING_ALL_APPLICATIONS);
                userService.update(user);
                processAdminViewingAllApplications(chatId, user, bot);
                return;
            case "üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
                user.setState(UserState.MAIN_MENU);
                userService.update(user);
                showMainMenu(chatId, user, bot);
                return;
            default:
                lastMessageId.put(chatId, bot.sendMessageWithKeyboard(chatId,
                        "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏", createAdminApplicationActionsKeyboard()));
                return;
        }

        applicationService.update(application);

        String message = String.format("‚úÖ –°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ #%d –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: %s",
                applicationId, application.getStatus().getDisplayName());
        lastMessageId.put(chatId, bot.sendMessageWithKeyboard(chatId, message, createBackToAdminKeyboard()));

        user.setState(UserState.ADMIN_VIEWING_ALL_APPLICATIONS);
        userService.update(user);
    }

    private void updateUserStatistics(Application application) {
        User user = application.getUser();

        if (application.getStatus() == ApplicationStatus.COMPLETED) {
            double cashback = 0.0;

            if (application.getUserValueGetType() == ValueType.BTC) {
                // –ü–æ–∫—É–ø–∫–∞ BTC - –Ω–∞—á–∏—Å–ª—è–µ–º 3% –∫–µ—à–±–µ–∫–∞ –æ—Ç —Å—É–º–º—ã
                user.setCompletedBuyApplications(user.getCompletedBuyApplications() + 1);
                user.setTotalBuyAmount(user.getTotalBuyAmount() + application.getCalculatedGiveValue());
                cashback = application.getCalculatedGiveValue() * 0.03;
            } else {
                // –ü—Ä–æ–¥–∞–∂–∞ BTC - –Ω–∞—á–∏—Å–ª—è–µ–º 3% –∫–µ—à–±–µ–∫–∞ –æ—Ç —Å—É–º–º—ã
                user.setCompletedSellApplications(user.getCompletedSellApplications() + 1);
                user.setTotalSellAmount(user.getTotalSellAmount() + application.getCalculatedGetValue());
                cashback = application.getCalculatedGetValue() * 0.03;
            }

            user.setBonusBalance(user.getBonusBalance() + cashback);
            user.setTotalApplications(user.getTotalApplications() + 1);
            userService.update(user);
        }
    }

    private void processAdminCommissionSettings(Long chatId, User user, String text, MyBot bot) {
        if (text.equals("üîô –ù–∞–∑–∞–¥")) {
            user.setState(UserState.ADMIN_MAIN_MENU);
            userService.update(user);
            showAdminMainMenu(chatId, bot);
            return;
        }

        try {
            String[] parts = text.split(" ");
            if (parts.length == 2) {
                String rangeStr = parts[0];
                double percent = Double.parseDouble(parts[1]);

                if (rangeStr.contains("-")) {
                    String[] rangeParts = rangeStr.split("-");
                    double min = Double.parseDouble(rangeParts[0]);
                    double max = Double.parseDouble(rangeParts[1]);
                    commissionConfig.updateCommissionRange(min, percent);

                    String message = String.format("‚úÖ –ö–æ–º–∏—Å—Å–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞!\n\n–î–∏–∞–ø–∞–∑–æ–Ω: %.0f-%.0f ‚ÇΩ\n–ö–æ–º–∏—Å—Å–∏—è: %.1f%%",
                            min, max, percent);
                    lastMessageId.put(chatId, bot.sendMessageWithKeyboard(chatId, message, createBackToAdminKeyboard()));
                } else {
                    double min = Double.parseDouble(rangeStr);
                    commissionConfig.updateCommissionRange(min, percent);

                    String message = String.format("‚úÖ –ö–æ–º–∏—Å—Å–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞!\n\n–û—Ç %.0f ‚ÇΩ\n–ö–æ–º–∏—Å—Å–∏—è: %.1f%%",
                            min, percent);
                    lastMessageId.put(chatId, bot.sendMessageWithKeyboard(chatId, message, createBackToAdminKeyboard()));
                }
                return;
            }
        } catch (Exception e) {
            // –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å
        }

        String message = "üí∞ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–∏—Å—Å–∏—è–º–∏\n\n" +
                "–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:\n" +
                "‚Ä¢ 1000-1999 ‚ÇΩ: " + commissionConfig.getCommissionPercent(1000) + "%\n" +
                "‚Ä¢ 2000-2999 ‚ÇΩ: " + commissionConfig.getCommissionPercent(2000) + "%\n" +
                "‚Ä¢ 3000-4999 ‚ÇΩ: " + commissionConfig.getCommissionPercent(3000) + "%\n" +
                "‚Ä¢ 5000+ ‚ÇΩ: " + commissionConfig.getCommissionPercent(5000) + "%\n\n" +
                "–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤–≤–µ–¥–∏—Ç–µ:\n" +
                "‚Ä¢ –î–ª—è –¥–∏–∞–ø–∞–∑–æ–Ω–∞: 1000-1999 5\n" +
                "‚Ä¢ –î–ª—è –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Å—É–º–º—ã: 5000 2\n\n" +
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ 'üîô –ù–∞–∑–∞–¥' –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞";

        ReplyKeyboardMarkup keyboard = createBackToAdminKeyboard();
        lastMessageId.put(chatId, bot.sendMessageWithKeyboard(chatId, message, keyboard));
    }

    private void processStartCommand(Update update, MyBot bot) {
        Long chatId = update.getMessage().getChatId();
        org.telegram.telegrambots.meta.api.objects.User telegramUser = update.getMessage().getFrom();

        User user = userService.findOrCreateUser(telegramUser);
        user.setState(UserState.CAPTCHA_CHECK);
        userService.update(user);

        showCaptcha(chatId, user, bot);
    }

    private void showCaptcha(Long chatId, User user, MyBot bot) {
        CaptchaService.CaptchaChallenge challenge = captchaService.generateCaptcha(user.getId());

        InlineKeyboardMarkup keyboard = createCaptchaKeyboard(challenge.getOptions());
        String message = "üîê –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –ø—Ä–æ–π–¥–∏—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫—É –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏\n\n" +
                "–í—ã–±–µ—Ä–∏—Ç–µ —Å–º–∞–π–ª–∏–∫: \"" + challenge.getCorrectEmoji() + "\"";

        lastMessageId.put(chatId, bot.sendMessageWithKeyboard(chatId, message, keyboard));
    }

    private void processCallback(Update update, MyBot bot) {
        String callbackData = update.getCallbackQuery().getData();
        Long chatId = update.getCallbackQuery().getMessage().getChatId();
        Long telegramId = update.getCallbackQuery().getFrom().getId();
        String callbackQueryId = update.getCallbackQuery().getId();
        Integer messageId = update.getCallbackQuery().getMessage().getMessageId();

        User user = userService.findByTelegramId(telegramId);
        if (user == null) {
            return;
        }

        if (callbackData.startsWith("captcha_")) {
            processCaptchaSelection(chatId, user, callbackData, bot, callbackQueryId, messageId);
        } else if (callbackData.startsWith("cancel_app_")) {
            processCancelApplicationCallback(chatId, user, callbackData, bot, callbackQueryId);
        } else if (callbackData.startsWith("queue_app_")) {
            processQueuePositionCallback(chatId, user, callbackData, bot, callbackQueryId);
        } else if (callbackData.startsWith("inline_")) {
            processInlineButton(chatId, user, callbackData, bot, callbackQueryId);
        }
    }
    private void processInlineButton(Long chatId, User user, String callbackData, MyBot bot, String callbackQueryId) {
        // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞
        deletePreviousBotMessage(chatId, bot);

        // –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
        bot.answerCallbackQuery(callbackQueryId, "–û–±—Ä–∞–±–æ—Ç–∫–∞...");

        switch (callbackData) {
            case "inline_buy":
                user.setState(UserState.BUY_MENU);
                userService.update(user);
                showBuyMenu(chatId, bot);
                break;
            case "inline_sell":
                user.setState(UserState.SELL_MENU);
                userService.update(user);
                showSellMenu(chatId, bot);
                break;
            case "inline_commissions":
                showCommissionInfo(chatId, user, bot);
                break;
            case "inline_other":
                user.setState(UserState.OTHER_MENU);
                userService.update(user);
                showOtherMenu(chatId, user, bot);
                break;
            case "inline_referral":
                if (user.getUsedReferralCode() != null) {
                    lastMessageId.put(chatId, bot.sendMessageWithKeyboard(chatId,
                            "‚ùå –í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥.", createMainMenuKeyboard(user)));
                    return;
                }
                user.setState(UserState.ENTERING_REFERRAL_CODE);
                userService.update(user);
                lastMessageId.put(chatId, bot.sendMessageWithKeyboard(chatId,
                        "–í–≤–µ–¥–∏—Ç–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥:", createBackKeyboard()));
                break;
        }
    }

    private void processCancelApplicationCallback(Long chatId, User user, String callbackData, MyBot bot, String callbackQueryId) {
        try {
            Long applicationId = Long.parseLong(callbackData.replace("cancel_app_", ""));
            Application application = applicationService.find(applicationId);

            if (application == null || !application.getUser().getId().equals(user.getId())) {
                bot.answerCallbackQuery(callbackQueryId, "‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞");
                return;
            }

            if (application.getStatus() != ApplicationStatus.FREE && application.getStatus() != ApplicationStatus.IN_WORK) {
                bot.answerCallbackQuery(callbackQueryId, "‚ùå –ù–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É —Å —Ç–µ–∫—É—â–∏–º —Å—Ç–∞—Ç—É—Å–æ–º");
                return;
            }

            application.setStatus(ApplicationStatus.CANCELLED);
            applicationService.update(application);

            // –£–î–ê–õ–Ø–ï–ú —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞—è–≤–∫–æ–π —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if (application.getTelegramMessageId() != null) {
                bot.deleteMessage(chatId, application.getTelegramMessageId());
            }

            bot.answerCallbackQuery(callbackQueryId, "‚úÖ –ó–∞—è–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞");

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ç–º–µ–Ω–µ
            String cancelMessage = "‚ùå –ó–∞—è–≤–∫–∞ #" + applicationId + " –æ—Ç–º–µ–Ω–µ–Ω–∞.";
            bot.sendMessage(chatId, cancelMessage);

        } catch (Exception e) {
            e.printStackTrace();
            bot.answerCallbackQuery(callbackQueryId, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∑–∞—è–≤–∫–∏");
        }
    }


    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–æ–º–µ—Ä–∞ –≤ –æ—á–µ—Ä–µ–¥–∏
    private void processQueuePositionCallback(Long chatId, User user, String callbackData, MyBot bot, String callbackQueryId) {
        try {
            Long applicationId = Long.parseLong(callbackData.replace("queue_app_", ""));
            Application application = applicationService.find(applicationId);

            if (application == null || !application.getUser().getId().equals(user.getId())) {
                bot.answerCallbackQuery(callbackQueryId, "‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞");
                return;
            }

            int queuePosition = calculateQueuePosition(application);
            String message = "üìä –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ " + queuePosition + " –º–µ—Å—Ç–µ –≤ –æ—á–µ—Ä–µ–¥–∏";

            bot.answerCallbackQuery(callbackQueryId, message);

        } catch (Exception e) {
            e.printStackTrace();
            bot.answerCallbackQuery(callbackQueryId, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–æ–º–µ—Ä–∞ –≤ –æ—á–µ—Ä–µ–¥–∏");
        }
    }


    // –†–∞—Å—á–µ—Ç –ø–æ–∑–∏—Ü–∏–∏ –≤ –æ—á–µ—Ä–µ–¥–∏
    private int calculateQueuePosition(Application application) {
        List<Application> activeApplications = applicationService.findActiveApplications();

        // –°–æ—Ä—Ç–∏—Ä—É–µ–º: VIP —Å–Ω–∞—á–∞–ª–∞, –∑–∞—Ç–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–∑–¥–∞–Ω–∏—è
        List<Application> sortedApplications = activeApplications.stream()
                .sorted(Comparator.comparing(Application::getIsVip).reversed()
                        .thenComparing(Application::getCreatedAt))
                .collect(Collectors.toList());

        for (int i = 0; i < sortedApplications.size(); i++) {
            if (sortedApplications.get(i).getId().equals(application.getId())) {
                return i + 1;
            }
        }
        return -1;
    }


    private void processCaptchaSelection(Long chatId, User user, String callbackData, MyBot bot, String callbackQueryId, Integer messageId) {
        String selectedEmoji = callbackData.replace("captcha_", "");

        if (captchaService.verifyCaptcha(user.getId(), selectedEmoji)) {
            user.setState(UserState.MAIN_MENU);
            userService.update(user);

            // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–∞–ø—á–µ–π
            bot.deleteMessage(chatId, messageId);

            // –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
            bot.answerCallbackQuery(callbackQueryId, "‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–π–¥–µ–Ω–∞!");

            showMainMenu(chatId, user, bot);
        } else {
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–æ–≤—É—é –∫–∞–ø—á—É –ø—Ä–∏ –Ω–µ–≤–µ—Ä–Ω–æ–º –≤—ã–±–æ—Ä–µ
            bot.answerCallbackQuery(callbackQueryId, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞");
            showCaptcha(chatId, user, bot);
        }
    }

    public void updateApplicationStatus(Long applicationId, ApplicationStatus newStatus, MyBot bot) {
        Application application = applicationService.find(applicationId);
        if (application == null) return;

        application.setStatus(newStatus);
        applicationService.update(application);

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if (application.getTelegramMessageId() != null) {
            String updatedMessage = formatApplicationMessage(application);
            InlineKeyboardMarkup keyboard = createApplicationInlineKeyboard(application.getId());

            try {
                bot.editMessageText(application.getUser().getTelegramId(),
                        application.getTelegramMessageId(),
                        updatedMessage,
                        keyboard);
            } catch (Exception e) {
                System.err.println("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏: " + e.getMessage());
            }
        }
    }

    private void showMainMenu(Long chatId, User user, MyBot bot) {
        String message = """
            üíº –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –æ–±–º–µ–Ω–Ω–∏–∫ ‚Äî ùêÇùêéùêíùêÄ ùêçùêéùêíùêìùêëùêÄ ùêÇùêáùêÄùêçùêÜùêÑ
            üöÄ –ë—ã—Å—Ç—Ä—ã–π –∏ –Ω–∞–¥—ë–∂–Ω—ã–π –æ–±–º–µ–Ω RUB ‚Üí BTC
            ‚öñÔ∏è –ß–µ—Å—Ç–Ω—ã–µ –∫—É—Ä—Å—ã, –±–µ–∑ –∑–∞–¥–µ—Ä–∂–µ–∫ –∏ —Å–∫—Ä—ã—Ç—ã—Ö –∫–æ–º–∏—Å—Å–∏–π.
            üí∏ –ë–û–ù–£–°: –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏ –ø–æ–ª—É—á–∞–µ—Ç–µ 3% –∫–µ—à–±—ç–∫ –Ω–∞ —Å–≤–æ–π –±–∞–ª–∞–Ω—Å!
            
            üì≤ –ö–∞–∫ –≤—Å—ë —Ä–∞–±–æ—Ç–∞–µ—Ç: 
            1Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ üíµ –ö—É–ø–∏—Ç—å –∏–ª–∏ üí∞ –ü—Ä–æ–¥–∞—Ç—å 
            2Ô∏è‚É£ –í–≤–µ–¥–∏—Ç–µ –Ω—É–∂–Ω—É—é —Å—É–º–º—É ü™ô 
            3Ô∏è‚É£ –£–∫–∞–∂–∏—Ç–µ —Å–≤–æ–π –∫–æ—à–µ–ª—ë–∫ üîê
            4Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç (üîπ–æ–±—ã—á–Ω—ã–π / üëë VIP) 
            5Ô∏è‚É£ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞—è–≤–∫—É ‚úÖ 
            6Ô∏è‚É£ –ï—Å–ª–∏ –≥–æ—Ç–æ–≤—ã –æ–ø–ª–∞—á–∏–≤–∞—Ç—å ‚Äî –ø–µ—Ä–µ—à–ª–∏—Ç–µ –∑–∞—è–≤–∫—É –æ–ø–µ—Ä–∞—Ç–æ—Ä—É ‚òéÔ∏è
            
            ‚öôÔ∏è –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: 
            üëë VIP-–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç ‚Äî –≤—Å–µ–≥–æ 300‚ÇΩ, –∑–∞—è–≤–∫–∞ –ø—Ä–æ—Ö–æ–¥–∏—Ç –º–≥–Ω–æ–≤–µ–Ω–Ω–æ
            üìä –ó–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç—å —Å–µ—Ç–∏ BTC: –Ω–∏–∑–∫–∞—è üö• 
            üïí –í—Ä–µ–º—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: 5‚Äì20 –º–∏–Ω—É—Ç 
            üí¨ –û—Ç–∑—ã–≤—ã –∫–ª–∏–µ–Ω—Ç–æ–≤: [@cosanostra_feedback] 
            üß∞ –¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞ 24/7: –≤—Å–µ–≥–¥–∞ –æ–Ω–ª–∞–π–Ω, —Ä–µ—à–∏–º –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å üîß
            
            COSA NOSTRA CHANGE ‚Äî —Ç—É—Ç —É–≤–∞–∂–∞—é—Ç —Ç–µ—Ö, –∫—Ç–æ —Ü–µ–Ω–∏—Ç —Å–∫–æ—Ä–æ—Å—Ç—å, —á–µ—Å—Ç–Ω–æ—Å—Ç—å –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç. ‚ö°
            """;

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Å inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        InlineKeyboardMarkup inlineKeyboard = createMainMenuInlineKeyboard(user);
        int messageId = bot.sendMessageWithInlineKeyboard(chatId, message, inlineKeyboard);
        lastMessageId.put(chatId, messageId);
    }

    private void processBuyConfirmation(Long chatId, User user, double rubAmount, double btcAmount,
                                        String inputType, String outputType, MyBot bot) {

        if (rubAmount < 1000) {
            lastMessageId.put(chatId, bot.sendMessageWithKeyboard(chatId,
                    "‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –∑–∞—è–≤–∫–∏ 1000 —Ä—É–±–ª–µ–π", createAmountInputKeyboard()));
            return;
        }

        double commission = commissionService.calculateCommission(rubAmount);
        double totalAmount = commissionService.calculateTotalWithCommission(rubAmount);

        Application application = new Application();
        application.setUser(user);
        application.setUserValueGetType(ValueType.BTC);
        application.setUserValueGiveType(ValueType.RUB);
        application.setUserValueGetValue(btcAmount);
        application.setUserValueGiveValue(totalAmount);
        application.setCalculatedGetValue(btcAmount);
        application.setCalculatedGiveValue(totalAmount);
        application.setTitle("–ü–æ–∫—É–ø–∫–∞ BTC –∑–∞ RUB");
        application.setStatus(ApplicationStatus.FREE);

        temporaryApplications.put(user.getId(), application);

        String calculationMessage = String.format("""
                    üí∞ –†–∞—Å—á–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏:
                    
                    üí∏ –°—É–º–º–∞: %s ‚ÇΩ
                    üí∞ –ö–æ–º–∏—Å—Å–∏—è: %s ‚ÇΩ (%.1f%%)
                    üí∏ –ò—Ç–æ–≥–æ –∫ –æ–ø–ª–∞—Ç–µ: %s ‚ÇΩ
                    ‚Çø –í—ã –ø–æ–ª—É—á–∏—Ç–µ: %s BTC
                    
                    –•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å üëë VIP-–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∑–∞ 300‚ÇΩ?
                    –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å—Å—è –≤ –ø–µ—Ä–≤—É—é –æ—á–µ—Ä–µ–¥—å!
                    """,
                formatRubAmount(rubAmount),
                formatRubAmount(commission),
                commissionService.getCommissionPercent(rubAmount),
                formatRubAmount(totalAmount),
                formatBtcAmount(btcAmount));

        ReplyKeyboardMarkup keyboard = createVipConfirmationKeyboard();
        lastMessageId.put(chatId, bot.sendMessageWithKeyboard(chatId, calculationMessage, keyboard));

        user.setState(UserState.CONFIRMING_VIP);
        userService.update(user);
    }


    private void processVipConfirmation(Long chatId, User user, String text, MyBot bot) {
        Application application = temporaryApplications.get(user.getId());

        if (application == null) {
            processMainMenu(chatId, user, bot);
            return;
        }

        switch (text) {
            case "üëë –î–∞, –¥–æ–±–∞–≤–∏—Ç—å VIP":
                application.setIsVip(true);
                break;
            case "üîπ –ù–µ—Ç, –æ–±—ã—á–Ω—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç":
                application.setIsVip(false);
                break;
            case "üîô –ù–∞–∑–∞–¥":
                user.setState(UserState.ENTERING_WALLET);
                userService.update(user);
                processEnteringWallet(chatId, user, "üîô –ù–∞–∑–∞–¥", bot);
                return;
            case "üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
                processMainMenu(chatId, user, bot);
                return;
            default:
                lastMessageId.put(chatId, bot.sendMessageWithKeyboard(chatId,
                        "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞", createVipConfirmationKeyboard()));
                return;
        }

        // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—é –∫—É–ø–æ–Ω–æ–≤
        String message = """
                üé´ –•–æ—Ç–∏—Ç–µ –ø—Ä–∏–º–µ–Ω–∏—Ç—å –∫—É–ø–æ–Ω –¥–ª—è —Å–∫–∏–¥–∫–∏?
                
                –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –∫—É–ø–æ–Ω, –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–º–µ–Ω–∏—Ç—å –µ–≥–æ —Å–µ–π—á–∞—Å.
                """;

        ReplyKeyboardMarkup keyboard = createCouponApplicationKeyboard();
        lastMessageId.put(chatId, bot.sendMessageWithKeyboard(chatId, message, keyboard));

        user.setState(UserState.APPLYING_COUPON_FINAL);
        userService.update(user);
    }

    private void processApplyingCouponFinal(Long chatId, User user, String text, MyBot bot) {
        Application application = temporaryApplications.get(user.getId());

        if (application == null) {
            processMainMenu(chatId, user, bot);
            return;
        }

        switch (text) {
            case "–ü—Ä–∏–º–µ–Ω–∏—Ç—å –∫—É–ø–æ–Ω":
                lastMessageId.put(chatId, bot.sendMessageWithKeyboard(chatId,
                        "üé´ –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∫—É–ø–æ–Ω–∞:", createBackKeyboard()));
                break;
            case "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
                showFinalApplicationConfirmation(chatId, user, application, bot);
                break;
            case "üîô –ù–∞–∑–∞–¥":
                user.setState(UserState.CONFIRMING_VIP);
                userService.update(user);
                processVipConfirmation(chatId, user, "üîô –ù–∞–∑–∞–¥", bot);
                break;
            case "üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
                processMainMenu(chatId, user, bot);
                break;
            default:
                processCouponCodeFinal(chatId, user, application, text, bot);
        }
    }

    private void processCouponCodeFinal(Long chatId, User user, Application application, String couponCode, MyBot bot) {
        try {
            Coupon coupon = couponService.findValidCoupon(couponCode, user)
                    .orElseThrow(() -> new IllegalArgumentException("–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π –∫—É–ø–æ–Ω"));

            application.setAppliedCoupon(coupon);
            showFinalApplicationConfirmation(chatId, user, application, bot);

        } catch (IllegalArgumentException e) {
            lastMessageId.put(chatId, bot.sendMessageWithKeyboard(chatId,
                    "‚ùå " + e.getMessage() + "\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∫–æ–¥ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'",
                    createCouponApplicationKeyboard()));
        }
    }

    private void showFinalApplicationConfirmation(Long chatId, User user, Application application, MyBot bot) {
        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏
        double calculatedAmount;
        double finalAmount;
        String currencyFrom, currencyTo;

        if (application.getUserValueGetType() == ValueType.BTC) {
            // –ü–æ–∫—É–ø–∫–∞ BTC
            double rubAmount = application.getUserValueGiveValue();
            double commission = commissionService.calculateCommission(rubAmount);
            calculatedAmount = commissionService.calculateTotalWithCommission(rubAmount);
            double btcPrice = cryptoPriceService.getCurrentPrice("BTC", "RUB");
            double btcAmount = rubAmount / btcPrice;

            currencyFrom = "‚ÇΩ";
            currencyTo = "BTC";
            finalAmount = btcAmount;

        } else {
            // –ü—Ä–æ–¥–∞–∂–∞ BTC
            double btcAmount = application.getUserValueGiveValue();
            double btcPrice = cryptoPriceService.getCurrentPrice("BTC", "RUB");
            double rubAmount = btcAmount * btcPrice;
            double commission = commissionService.calculateCommission(rubAmount);
            calculatedAmount = rubAmount - commission; // –ü—Ä–∏ –ø—Ä–æ–¥–∞–∂–µ –∫–æ–º–∏—Å—Å–∏—è –≤—ã—á–∏—Ç–∞–µ—Ç—Å—è

            currencyFrom = "BTC";
            currencyTo = "‚ÇΩ";
            finalAmount = calculatedAmount;
        }

        // –î–æ–±–∞–≤–ª—è–µ–º VIP —Å—Ç–æ–∏–º–æ—Å—Ç—å –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–æ
        if (application.getIsVip()) {
            calculatedAmount += 300;
        }

        // –ü—Ä–∏–º–µ–Ω—è–µ–º –∫—É–ø–æ–Ω –µ—Å–ª–∏ –µ—Å—Ç—å
        if (application.getAppliedCoupon() != null) {
            calculatedAmount = couponService.applyCoupon(calculatedAmount, application.getAppliedCoupon());
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞—è–≤–∫—É
        if (application.getUserValueGetType() == ValueType.BTC) {
            application.setCalculatedGiveValue(calculatedAmount);
            application.setCalculatedGetValue(finalAmount);
            application.setUserValueGetValue(finalAmount);
        } else {
            application.setCalculatedGiveValue(application.getUserValueGiveValue()); // BTC amount
            application.setCalculatedGetValue(calculatedAmount); // RUB amount after commission
            application.setUserValueGetValue(calculatedAmount);
        }

        String operationType = application.getUserValueGetType() == ValueType.BTC ? "–ø–æ–∫—É–ø–∫–∏" : "–ø—Ä–æ–¥–∞–∂–∏";
        String walletLabel = application.getUserValueGetType() == ValueType.BTC ? "üîê –ö–æ—à–µ–ª–µ–∫ BTC" : "üí≥ –†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –≤—ã–ø–ª–∞—Ç—ã";

        String applicationDetails = String.format("""
                        üìã –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ %s:
                        
                        %s –û—Ç–¥–∞–µ—Ç–µ: %.8f %s
                        üí∞ –ü–æ–ª—É—á–∞–µ—Ç–µ: %.2f %s
                        üí∏ –ö–æ–º–∏—Å—Å–∏—è: —É—á—Ç–µ–Ω–∞ –≤ —Ä–∞—Å—á–µ—Ç–µ
                        %s
                        %s
                        üíµ –ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞: %.2f %s
                        %s: %s
                        üï∞Ô∏è –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: 5 –º–∏–Ω—É—Ç
                        
                        –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏?
                        """,
                operationType,
                application.getUserValueGetType() == ValueType.BTC ? "üí∏" : "‚Çø",
                application.getUserValueGetType() == ValueType.BTC ?
                        application.getUserValueGiveValue() : application.getUserValueGiveValue(),
                application.getUserValueGetType() == ValueType.BTC ? "‚ÇΩ" : "BTC",
                application.getUserValueGetType() == ValueType.BTC ?
                        finalAmount : calculatedAmount,
                application.getUserValueGetType() == ValueType.BTC ? "BTC" : "‚ÇΩ",
                application.getIsVip() ? "üëë VIP-–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: +300 ‚ÇΩ" : "üîπ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: –æ–±—ã—á–Ω—ã–π",
                application.getAppliedCoupon() != null ?
                        String.format("üé´ –ö—É–ø–æ–Ω: %s", application.getAppliedCoupon().getCode()) : "",
                application.getUserValueGetType() == ValueType.BTC ?
                        calculatedAmount : calculatedAmount,
                application.getUserValueGetType() == ValueType.BTC ? "‚ÇΩ" : "‚ÇΩ",
                walletLabel,
                application.getWalletAddress()
        );

        ReplyKeyboardMarkup keyboard = createFinalConfirmationKeyboard();
        lastMessageId.put(chatId, bot.sendMessageWithKeyboard(chatId, applicationDetails, keyboard));

        user.setState(UserState.CONFIRMING_APPLICATION);
        userService.update(user);
    }


    private void processEnteringWallet(Long chatId, User user, String text, MyBot bot) {
        Application application = temporaryApplications.get(user.getId());

        if (application == null) {
            processMainMenu(chatId, user, bot);
            return;
        }

        if (text.equals("üîô –ù–∞–∑–∞–¥")) {
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∏–∑ –∫–∞–∫–æ–≥–æ –º–µ–Ω—é –ø—Ä–∏—à–ª–∏
            if (application.getUserValueGetType() == ValueType.BTC) {
                user.setState(UserState.BUY_MENU);
                showBuyMenu(chatId, bot);
            } else {
                user.setState(UserState.SELL_MENU);
                showSellMenu(chatId, bot);
            }
            userService.update(user);
            return;
        }

        if (text.equals("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")) {
            processMainMenu(chatId, user, bot);
            return;
        }

        // –î–ª—è –ø—Ä–æ–¥–∞–∂–∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è (–±–∞–Ω–∫–æ–≤—Å–∫–∏–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã)
//        if (application.getUserValueGetType() == ValueType.RUB) {
//            // –í–∞–ª–∏–¥–∞—Ü–∏—è –±–∞–Ω–∫–æ–≤—Å–∫–∏—Ö —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è)
//            if (text.length() < 16 && text.length() > 20) {
//                lastMessageId.put(chatId, bot.sendMessageWithKeyboard(chatId,
//                        "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –±–∞–Ω–∫–æ–≤—Å–∫–∏—Ö —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∏ –≤–≤–µ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞:",
//                        createBackKeyboard()));
//                return;
//            }
//        } else {
//            if (text.length() < 26 || text.length() > 35) {
//                lastMessageId.put(chatId, bot.sendMessageWithKeyboard(chatId,
//                        "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç Bitcoin-–∞–¥—Ä–µ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∏ –≤–≤–µ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞:",
//                        createBackKeyboard()));
//                return;
//            }
//        }

        application.setWalletAddress(text);

        // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É VIP (–æ–¥–∏–Ω–∞–∫–æ–≤–æ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –∏ –ø—Ä–æ–¥–∞–∂–∏)
        String message = """
                üíé –•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å üëë VIP-–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∑–∞ 300‚ÇΩ?
                
                üëë VIP-–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç:
                ‚Ä¢ –ü–µ—Ä–≤–æ–æ—á–µ—Ä–µ–¥–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
                ‚Ä¢ –£—Å–∫–æ—Ä–µ–Ω–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ  
                ‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –≤ –æ—á–µ—Ä–µ–¥–∏
                ‚Ä¢ –õ–∏—á–Ω–æ–≥–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
                
                –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç:
                """;

        ReplyKeyboardMarkup keyboard = createVipConfirmationKeyboard();
        lastMessageId.put(chatId, bot.sendMessageWithKeyboard(chatId, message, keyboard));

        user.setState(UserState.CONFIRMING_VIP);
        userService.update(user);
    }


    private void processMainMenuCommand(Long chatId, User user, String text, MyBot bot) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
        if (text.startsWith("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É #")) {
            try {
                Long applicationId = Long.parseLong(text.replace("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É #", "").trim());
                cancelUserApplication(chatId, user, applicationId, bot);
                return;
            } catch (NumberFormatException e) {
                // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º
            }
        }

        if (text.equals("üìû –ù–∞–ø–∏—Å–∞—Ç—å –æ–ø–µ—Ä–∞—Ç–æ—Ä—É")) {
            String message = "üìû –°–≤—è–∑—å —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º: @cosanostra_support";
            lastMessageId.put(chatId, bot.sendMessageWithKeyboard(chatId, message, createMainMenuKeyboard(user)));
            return;
        }

        // –û—Å–Ω–æ–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
        switch (text) {
            case "üí∞ –ö—É–ø–∏—Ç—å":
                user.setState(UserState.BUY_MENU);
                userService.update(user);
                showBuyMenu(chatId, bot);
                break;
            case "üí∏ –ü—Ä–æ–¥–∞—Ç—å":
                user.setState(UserState.SELL_MENU);
                userService.update(user);
                showSellMenu(chatId, bot);
                break;
            case "üí≥ –ö–æ–º–∏—Å—Å–∏–∏":
                showCommissionInfo(chatId, user, bot);
                break;
            case "üé´ –í–≤–µ—Å—Ç–∏ —Ä–µ—Ñ. –∫–æ–¥":
                if (user.getUsedReferralCode() != null) {
                    lastMessageId.put(chatId, bot.sendMessageWithKeyboard(chatId,
                            "‚ùå –í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥.", createMainMenuKeyboard(user)));
                    return;
                }
                user.setState(UserState.ENTERING_REFERRAL_CODE);
                userService.update(user);
                lastMessageId.put(chatId, bot.sendMessageWithKeyboard(chatId,
                        "–í–≤–µ–¥–∏—Ç–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥:", createBackKeyboard()));
                break;
            case "üë®‚Äçüíº –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å":
                if (adminConfig.isAdmin(user.getId())) {
                    user.setState(UserState.ADMIN_MAIN_MENU);
                    userService.update(user);
                    showAdminMainMenu(chatId, bot);
                } else {
                    lastMessageId.put(chatId, bot.sendMessageWithKeyboard(chatId, "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", createMainMenuKeyboard(user)));
                }
                break;
            case "‚öôÔ∏è –ü—Ä–æ—á–µ–µ":
                user.setState(UserState.OTHER_MENU);
                userService.update(user);
                showOtherMenu(chatId, user, bot);
                break;
            case "üíé –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
                deletePreviousBotMessage(chatId, bot);
                showMainMenu(chatId, user, bot);
                break;
            default:
                lastMessageId.put(chatId, bot.sendMessageWithKeyboard(chatId,
                        "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é", createMainMenuKeyboard(user)));
        }
    }


    private void showCommissionInfo(Long chatId, User user, MyBot bot) {
        String message = String.format("""
                        üí∞ –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –∫–æ–º–∏—Å—Å–∏–∏:
                        
                        ‚Ä¢ 1000-1999 ‚ÇΩ: %.1f%%
                        ‚Ä¢ 2000-2999 ‚ÇΩ: %.1f%%
                        ‚Ä¢ 3000-4999 ‚ÇΩ: %.1f%%
                        ‚Ä¢ 5000+ ‚ÇΩ: %.1f%%
                        
                        üí° –ö–æ–º–∏—Å—Å–∏—è —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏.
                        üí∏ VIP-–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: +300 ‚ÇΩ –∫ —Å—É–º–º–µ –∑–∞—è–≤–∫–∏
                        
                        üëë VIP-–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç:
                        ‚Ä¢ –ü–µ—Ä–≤–æ–æ—á–µ—Ä–µ–¥–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
                        ‚Ä¢ –£—Å–∫–æ—Ä–µ–Ω–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
                        ‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –≤ –æ—á–µ—Ä–µ–¥–∏
                        """,
                commissionConfig.getCommissionPercent(1000),
                commissionConfig.getCommissionPercent(2000),
                commissionConfig.getCommissionPercent(3000),
                commissionConfig.getCommissionPercent(5000)
        );

        lastMessageId.put(chatId, bot.sendMessageWithKeyboard(chatId, message, createMainMenuKeyboard(user)));
    }

    private void showAdminMainMenu(Long chatId, MyBot bot) {
        String message = "üë®‚Äçüíº –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:";
        ReplyKeyboardMarkup keyboard = createAdminMainMenuKeyboard();
        lastMessageId.put(chatId, bot.sendMessageWithKeyboard(chatId, message, keyboard));
    }

    private void showBuyMenu(Long chatId, MyBot bot) {
        String message = "üí∞ –ü–æ–∫—É–ø–∫–∞ Bitcoin\n\n" +
                "–í—ã —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å Bitcoin –∑–∞ —Ä—É–±–ª–∏.\n\n" +
                "–ü–æ—Å–ª–µ –≤–≤–æ–¥–∞ —Å—É–º–º—ã –≤—ã —É–≤–∏–¥–∏—Ç–µ:\n" +
                "‚Ä¢ –°–∫–æ–ª—å–∫–æ —Ä—É–±–ª–µ–π –≤—ã –æ—Ç–¥–∞–¥–∏—Ç–µ\n" +
                "‚Ä¢ –°–∫–æ–ª—å–∫–æ Bitcoin –ø–æ–ª—É—á–∏—Ç–µ";

        ReplyKeyboardMarkup keyboard = createBuyMenuKeyboard();
        lastMessageId.put(chatId, bot.sendMessageWithKeyboard(chatId, message, keyboard));
    }

    private void showSellMenu(Long chatId, MyBot bot) {
        String message = "üí∏ –ü—Ä–æ–¥–∞–∂–∞ Bitcoin\n\n" +
                "–í—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–∞—Ç—å Bitcoin –∑–∞ —Ä—É–±–ª–∏.\n\n" +
                "–ü–æ—Å–ª–µ –≤–≤–æ–¥–∞ —Å—É–º–º—ã –≤—ã —É–≤–∏–¥–∏—Ç–µ:\n" +
                "‚Ä¢ –°–∫–æ–ª—å–∫–æ Bitcoin –≤—ã –æ—Ç–¥–∞–¥–∏—Ç–µ\n" +
                "‚Ä¢ –°–∫–æ–ª—å–∫–æ —Ä—É–±–ª–µ–π –ø–æ–ª—É—á–∏—Ç–µ";

        ReplyKeyboardMarkup keyboard = createSellMenuKeyboard();
        lastMessageId.put(chatId, bot.sendMessageWithKeyboard(chatId, message, keyboard));
    }

    private void processBuyMenu(Long chatId, User user, String text, MyBot bot) {
        if ("–í–≤–µ—Å—Ç–∏ —Å—É–º–º—É –≤ RUB".equals(text)) {
            user.setState(UserState.ENTERING_BUY_AMOUNT_RUB);
            userService.update(user);
            currentOperation.put(user.getId(), "BUY_RUB");

            String message = "üíé –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤ —Ä—É–±–ª—è—Ö, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –ø–æ—Ç—Ä–∞—Ç–∏—Ç—å –Ω–∞ –ø–æ–∫—É–ø–∫—É Bitcoin:";
            ReplyKeyboardMarkup keyboard = createAmountInputKeyboard();
            lastMessageId.put(chatId, bot.sendMessageWithKeyboard(chatId, message, keyboard));
        } else if ("–í–≤–µ—Å—Ç–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ BTC".equals(text)) {
            user.setState(UserState.ENTERING_BUY_AMOUNT_BTC);
            userService.update(user);
            currentOperation.put(user.getId(), "BUY_BTC");

            String message = "üíé –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ Bitcoin, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å:";
            ReplyKeyboardMarkup keyboard = createAmountInputKeyboard();
            lastMessageId.put(chatId, bot.sendMessageWithKeyboard(chatId, message, keyboard));
        } else if ("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é".equals(text)) {
            processMainMenu(chatId, user, bot);
        } else {
            lastMessageId.put(chatId, bot.sendMessageWithKeyboard(chatId, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏", createBuyMenuKeyboard()));
        }
    }

    private void processSellMenu(Long chatId, User user, String text, MyBot bot) {
        if ("–í–≤–µ—Å—Ç–∏ —Å—É–º–º—É".equals(text)) {
            user.setState(UserState.ENTERING_SELL_AMOUNT);
            userService.update(user);
            currentOperation.put(user.getId(), "SELL");

            String message = "üíé –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ Bitcoin, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–∞—Ç—å:";
            ReplyKeyboardMarkup keyboard = createAmountInputKeyboard();
            lastMessageId.put(chatId, bot.sendMessageWithKeyboard(chatId, message, keyboard));
        } else if ("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é".equals(text)) {
            processMainMenu(chatId, user, bot);
        } else {
            lastMessageId.put(chatId, bot.sendMessageWithKeyboard(chatId, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏", createSellMenuKeyboard()));
        }
    }

    private void processEnteringSellAmount(Long chatId, User user, String text, MyBot bot) {
        switch (text) {
            case "üîô –ù–∞–∑–∞–¥":
                user.setState(UserState.SELL_MENU);
                userService.update(user);
                showSellMenu(chatId, bot);
                break;
            case "üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
                processMainMenu(chatId, user, bot);
                break;
            default:
                try {
                    double btcAmount = Double.parseDouble(text);
                    if (btcAmount <= 0) {
                        lastMessageId.put(chatId, bot.sendMessageWithKeyboard(chatId,
                                "‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0", createAmountInputKeyboard()));
                        return;
                    }

                    // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –∑–∞—è–≤–∫—É –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏
                    Application application = new Application();
                    application.setUser(user);
                    application.setUserValueGetType(ValueType.RUB);
                    application.setUserValueGiveType(ValueType.BTC);
                    application.setUserValueGiveValue(btcAmount);
                    application.setTitle("–ü—Ä–æ–¥–∞–∂–∞ BTC –∑–∞ RUB");
                    application.setStatus(ApplicationStatus.FREE);

                    temporaryApplications.put(user.getId(), application);

                    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É –∫–æ—à–µ–ª—å–∫–∞ (–¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è RUB)
                    String message = "üîê –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –∏–ª–∏ —Å—á–µ—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä—É–±–ª–µ–π:";
                    ReplyKeyboardMarkup keyboard = createBackKeyboard();
                    lastMessageId.put(chatId, bot.sendMessageWithKeyboard(chatId, message, keyboard));

                    user.setState(UserState.ENTERING_WALLET);
                    userService.update(user);

                } catch (NumberFormatException e) {
                    lastMessageId.put(chatId, bot.sendMessageWithKeyboard(chatId,
                            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ", createAmountInputKeyboard()));
                }
        }
    }

    private void showExchangeRates(Long chatId, User user, MyBot bot) {
        double btcPrice = cryptoPriceService.getCurrentPrice("BTC", "RUB");
        double ethPrice = cryptoPriceService.getCurrentPrice("ETH", "RUB");

        String message = String.format("""
                üìä –¢–µ–∫—É—â–∏–µ –∫—É—Ä—Å—ã:
                
                ‚Çø Bitcoin (BTC): %.2f ‚ÇΩ
                Œû Ethereum (ETH): %.2f ‚ÇΩ
                
                *–ö—É—Ä—Å—ã –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
                """, btcPrice, ethPrice);

        lastMessageId.put(chatId, bot.sendMessageWithKeyboard(chatId, message, createOtherMenuKeyboard()));
    }

    private void showProfile(Long chatId, User user, MyBot bot) {
        String message = String.format("""
        üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:
        
        üÜî ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: %d
        üìû Telegram ID: %d
        üë§ –ò–º—è: %s
        üì± Username: @%s
        
        üí∞ –ë–æ–Ω—É—Å–Ω—ã–π –±–∞–ª–∞–Ω—Å: %s
        
        üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞—è–≤–æ–∫:
        ‚úÖ –£—Å–ø–µ—à–Ω–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–æ: %d
        üí∏ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ: %s
        üí∞ –ü–æ–ª—É—á–µ–Ω–æ: %s
        üìà –í—Å–µ–≥–æ –∑–∞—è–≤–æ–∫: %d
        
        üìà –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞:
        üë• –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ: %d
        üí∞ –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: %s
        """,
                user.getId(),
                user.getTelegramId(),
                user.getFirstName() + (user.getLastName() != null ? " " + user.getLastName() : ""),
                user.getUsername() != null ? user.getUsername() : "–Ω–µ —É–∫–∞–∑–∞–Ω",
                formatRubAmount(user.getBonusBalance()),
                user.getCompletedBuyApplications() + user.getCompletedSellApplications(),
                formatRubAmount(user.getTotalBuyAmount()),
                formatRubAmount(user.getTotalSellAmount()),
                user.getTotalApplications(),
                user.getReferralCount(),
                formatRubAmount(user.getReferralEarnings())
        );

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Å inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        InlineKeyboardMarkup inlineKeyboard = createProfileInlineKeyboard();
        int messageId = bot.sendMessageWithInlineKeyboard(chatId, message, inlineKeyboard);
        lastMessageId.put(chatId, messageId);
    }


    private void processApplyingCoupon(Long chatId, User user, String text, MyBot bot) {
        Application application = temporaryApplications.get(user.getId());

        if (application == null) {
            processMainMenu(chatId, user, bot);
            return;
        }

        switch (text) {
            case "–ü—Ä–∏–º–µ–Ω–∏—Ç—å –∫—É–ø–æ–Ω":
                lastMessageId.put(chatId, bot.sendMessageWithKeyboard(chatId,
                        "üé´ –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∫—É–ø–æ–Ω–∞:", createBackKeyboard()));
                break;
            case "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
                createApplicationWithoutCoupon(chatId, user, application, bot);
                break;
            case "üîô –ù–∞–∑–∞–¥":
                if ("BUY_RUB".equals(currentOperation.get(user.getId())) ||
                        "BUY_BTC".equals(currentOperation.get(user.getId()))) {
                    user.setState(UserState.BUY_MENU);
                } else {
                    user.setState(UserState.SELL_MENU);
                }
                userService.update(user);
                lastMessageId.put(chatId, bot.sendMessageWithKeyboard(chatId,
                        "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É:", createAmountInputKeyboard()));
                break;
            case "üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
                processMainMenu(chatId, user, bot);
                break;
            default:
                processCouponCode(chatId, user, application, text, bot);
        }
    }

    private void processCouponCode(Long chatId, User user, Application application, String couponCode, MyBot bot) {
        try {
            Coupon coupon = couponService.findValidCoupon(couponCode, user)
                    .orElseThrow(() -> new IllegalArgumentException("–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π –∫—É–ø–æ–Ω"));

            double originalAmount = application.getCalculatedGiveValue();
            double discountedAmount = couponService.applyCoupon(originalAmount, coupon);

            application.setAppliedCoupon(coupon);
            application.setFinalAmountAfterDiscount(discountedAmount);
            application.setStatus(ApplicationStatus.FREE);

            applicationService.create(application);
            temporaryApplications.remove(user.getId());

            String message = String.format("""
                            ‚úÖ –ö—É–ø–æ–Ω –ø—Ä–∏–º–µ–Ω–µ–Ω!
                            
                            üé´ –ö—É–ø–æ–Ω: %s
                            üí∞ –°–∫–∏–¥–∫–∞: %s
                            üí∏ –ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞: %.2f ‚ÇΩ
                            
                            –ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ —Å –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ–º –∫—É–ø–æ–Ω–∞!
                            """,
                    coupon.getCode(),
                    coupon.getDiscountPercent() != null ?
                            coupon.getDiscountPercent() + "%" :
                            coupon.getDiscountAmount() + " ‚ÇΩ",
                    discountedAmount);

            lastMessageId.put(chatId, bot.sendMessageWithKeyboard(chatId, message, createMainMenuKeyboard(user)));

            user.setState(UserState.MAIN_MENU);
            userService.update(user);

        } catch (IllegalArgumentException e) {
            lastMessageId.put(chatId, bot.sendMessageWithKeyboard(chatId,
                    "‚ùå " + e.getMessage() + "\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∫–æ–¥ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'",
                    createCouponApplicationKeyboard()));
        }
    }

    private void createApplicationWithoutCoupon(Long chatId, User user, Application application, MyBot bot) {
        application.setStatus(ApplicationStatus.FREE);
        applicationService.create(application);
        temporaryApplications.remove(user.getId());

        String message = "‚úÖ –ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!\n\n";
        if (application.getUserValueGetType() == ValueType.BTC) {
            message += String.format("üí∏ –í—ã –æ—Ç–¥–∞–¥–∏—Ç–µ: %.2f ‚ÇΩ\n‚Çø –í—ã –ø–æ–ª—É—á–∏—Ç–µ: %.8f BTC",
                    application.getCalculatedGiveValue(), application.getCalculatedGetValue());
        } else {
            message += String.format("‚Çø –í—ã –æ—Ç–¥–∞–¥–∏—Ç–µ: %.8f BTC\nüí∏ –í—ã –ø–æ–ª—É—á–∏—Ç–µ: %.2f ‚ÇΩ",
                    application.getCalculatedGiveValue(), application.getCalculatedGetValue());
        }

        lastMessageId.put(chatId, bot.sendMessageWithKeyboard(chatId, message, createMainMenuKeyboard(user)));

        user.setState(UserState.MAIN_MENU);
        userService.update(user);
    }

    private void showOtherMenu(Long chatId, User user, MyBot bot) {
        String message = "‚öôÔ∏è –ü—Ä–æ—á–µ–µ\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:";
        ReplyKeyboardMarkup keyboard = createOtherMenuKeyboard();
        lastMessageId.put(chatId, bot.sendMessageWithKeyboard(chatId, message, keyboard));
    }

    private void processViewingCoupons(Long chatId, User user, MyBot bot) {
        List<Coupon> userCoupons = couponService.getUserCoupons(user.getId());

        if (userCoupons.isEmpty()) {
            String message = "üé´ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫—É–ø–æ–Ω–æ–≤.";
            lastMessageId.put(chatId, bot.sendMessageWithKeyboard(chatId, message, createMainMenuKeyboard(user)));
        } else {
            StringBuilder response = new StringBuilder("üé´ –í–∞—à–∏ –∫—É–ø–æ–Ω—ã:\n\n");

            for (int i = 0; i < userCoupons.size(); i++) {
                Coupon coupon = userCoupons.get(i);
                response.append(String.format("""
                                üî¢ –ù–æ–º–µ—Ä: %d
                                üé´ –ö–æ–¥: %s
                                üí∞ –°–∫–∏–¥–∫–∞: %s
                                üìù –û–ø–∏—Å–∞–Ω–∏–µ: %s
                                """,
                        i + 1,
                        coupon.getCode(),
                        coupon.getDiscountPercent() != null ?
                                coupon.getDiscountPercent() + "%" :
                                coupon.getDiscountAmount() + " ‚ÇΩ",
                        coupon.getDescription() != null ? coupon.getDescription() : "–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è"
                ));

                if (coupon.getValidUntil() != null) {
                    response.append(String.format("üìÖ –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: %s\n", coupon.getValidUntil().toLocalDate()));
                }

                response.append("--------------------\n");
            }

            response.append("\n–ß—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫—É–ø–æ–Ω, –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ –Ω–æ–º–µ—Ä –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏.");
            lastMessageId.put(chatId, bot.sendMessageWithKeyboard(chatId, response.toString(), createMainMenuKeyboard(user)));
        }

        user.setState(UserState.MAIN_MENU);
        userService.update(user);
    }

    private void processViewingApplications(Long chatId, User user, MyBot bot) {
        List<Application> applications = applicationService.findByUser(user.getId());

        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è (–Ω–æ–≤—ã–µ —Å–Ω–∞—á–∞–ª–∞) –∏ –±–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3
        List<Application> recentApplications = applications.stream()
                .sorted((a1, a2) -> a2.getCreatedAt().compareTo(a1.getCreatedAt()))
                .limit(3)
                .collect(Collectors.toList());

        if (recentApplications.isEmpty()) {
            String message = "üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞—è–≤–æ–∫.\n–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—É—é —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏ 'üí∞ –ö—É–ø–∏—Ç—å' –∏–ª–∏ 'üí∏ –ü—Ä–æ–¥–∞—Ç—å'";
            lastMessageId.put(chatId, bot.sendMessageWithKeyboard(chatId, message, createMainMenuKeyboard(user)));
        } else {
            StringBuilder response = new StringBuilder("üìã –í–∞—à–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞—è–≤–∫–∏:\n\n");

            for (int i = 0; i < recentApplications.size(); i++) {
                Application app = recentApplications.get(i);
                response.append(String.format("""
                                üÜî –ó–∞—è–≤–∫–∞ #%d
                                üìä –°—Ç–∞—Ç—É—Å: %s
                                üí∞ –¢–∏–ø: %s
                                üí∏ –°—É–º–º–∞: %.2f ‚ÇΩ
                                ‚Çø Bitcoin: %.8f BTC
                                üìÖ –°–æ–∑–¥–∞–Ω–∞: %s
                                """,
                        app.getId(),
                        app.getStatus().getDisplayName(),
                        app.getTitle(),
                        app.getCalculatedGiveValue(),
                        app.getCalculatedGetValue(),
                        app.getCreatedAt().format(DateTimeFormatter.ofPattern("dd.MM.yyyy HH:mm"))
                ));

                if (app.getAppliedCoupon() != null) {
                    response.append(String.format("üé´ –ö—É–ø–æ–Ω: %s\n", app.getAppliedCoupon().getCode()));
                }

                response.append("--------------------\n");
            }

            lastMessageId.put(chatId, bot.sendMessageWithKeyboard(chatId, response.toString(), createMainMenuKeyboard(user)));
        }

        user.setState(UserState.MAIN_MENU);
        userService.update(user);
    }

    private void processEnteringBuyAmountRub(Long chatId, User user, String text, MyBot bot) {
        switch (text) {
            case "üîô –ù–∞–∑–∞–¥":
                user.setState(UserState.BUY_MENU);
                userService.update(user);
                showBuyMenu(chatId, bot);
                break;
            case "üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
                processMainMenu(chatId, user, bot);
                break;
            default:
                try {
                    double rubAmount = Double.parseDouble(text);

                    if (rubAmount < 1000) {
                        lastMessageId.put(chatId, bot.sendMessageWithKeyboard(chatId,
                                "‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –∑–∞—è–≤–∫–∏ 1000 —Ä—É–±–ª–µ–π", createAmountInputKeyboard()));
                        return;
                    }

                    // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –∑–∞—è–≤–∫—É
                    Application application = new Application();
                    application.setUser(user);
                    application.setUserValueGetType(ValueType.BTC);
                    application.setUserValueGiveType(ValueType.RUB);
                    application.setUserValueGiveValue(rubAmount);
                    application.setTitle("–ü–æ–∫—É–ø–∫–∞ BTC –∑–∞ RUB");
                    application.setStatus(ApplicationStatus.FREE);

                    temporaryApplications.put(user.getId(), application);

                    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É –∫–æ—à–µ–ª—å–∫–∞
                    String message = "üîê –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å Bitcoin-–∫–æ—à–µ–ª—å–∫–∞, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –ø–æ—Å—Ç—É–ø–∏—Ç –∫—Ä–∏–ø—Ç–∞:";
                    ReplyKeyboardMarkup keyboard = createBackKeyboard();
                    lastMessageId.put(chatId, bot.sendMessageWithKeyboard(chatId, message, keyboard));

                    user.setState(UserState.ENTERING_WALLET);
                    userService.update(user);

                } catch (NumberFormatException e) {
                    lastMessageId.put(chatId, bot.sendMessageWithKeyboard(chatId,
                            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ", createAmountInputKeyboard()));
                }
        }
    }

    private void processEnteringBuyAmountBtc(Long chatId, User user, String text, MyBot bot) {
        switch (text) {
            case "üîô –ù–∞–∑–∞–¥":
                user.setState(UserState.BUY_MENU);
                userService.update(user);
                showBuyMenu(chatId, bot);
                break;
            case "üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
                processMainMenu(chatId, user, bot);
                break;
            default:
                try {
                    double btcAmount = Double.parseDouble(text);
                    if (btcAmount <= 0) {
                        lastMessageId.put(chatId, bot.sendMessageWithKeyboard(chatId, "‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0", createAmountInputKeyboard()));
                        return;
                    }

                    double btcPrice = cryptoPriceService.getCurrentPrice("BTC", "RUB");
                    double rubAmount = btcAmount * btcPrice;

                    processBuyConfirmation(chatId, user, rubAmount, btcAmount, "BTC", "RUB", bot);

                } catch (NumberFormatException e) {
                    lastMessageId.put(chatId, bot.sendMessageWithKeyboard(chatId, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ", createAmountInputKeyboard()));
                }
        }
    }


    private void processMainMenu(Long chatId, User user, MyBot bot) {
        user.setState(UserState.MAIN_MENU);
        userService.update(user);
        showMainMenu(chatId, user, bot);
    }

    private void showAllApplications(Long chatId, User user, MyBot bot) {
        List<Application> allApplications = applicationService.findAll();

        if (allApplications.isEmpty()) {
            lastMessageId.put(chatId, bot.sendMessageWithKeyboard(chatId,
                    "üì≠ –ù–µ—Ç –∑–∞—è–≤–æ–∫ –≤ —Å–∏—Å—Ç–µ–º–µ", createAdminMainMenuKeyboard()));
            return;
        }

        StringBuilder message = new StringBuilder("üìã –í—Å–µ –∑–∞—è–≤–∫–∏:\n\n");

        for (int i = 0; i < Math.min(allApplications.size(), 10); i++) {
            Application app = allApplications.get(i);
            String userInfo = String.format("@%s (ID: %d)",
                    app.getUser().getUsername() != null ? app.getUser().getUsername() : "–Ω–µ—Ç_username",
                    app.getUser().getId());

            message.append(String.format("""
                            üÜî #%d | %s
                            üë§ %s
                            %s
                            üí∞ %.2f ‚ÇΩ | %s
                            üìä %s
                            üïí %s
                            --------------------
                            """,
                    app.getId(),
                    app.getTitle(),
                    app.getUser().getFirstName(),
                    userInfo, // –î–û–ë–ê–í–õ–ï–ù–û
                    app.getCalculatedGiveValue(),
                    app.getIsVip() ? "üëë VIP" : "üîπ –û–±—ã—á–Ω–∞—è",
                    app.getStatus().getDisplayName(),
                    app.getCreatedAt().format(DateTimeFormatter.ofPattern("dd.MM.yy HH:mm"))
            ));
        }

        if (allApplications.size() > 10) {
            message.append("\n‚ö†Ô∏è –ü–æ–∫–∞–∑–∞–Ω–æ 10 –∏–∑ " + allApplications.size() + " –∑–∞—è–≤–æ–∫");
        }

        message.append("\nüîç –î–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n");
        message.append("‚Ä¢ /filter_status [—Å—Ç–∞—Ç—É—Å] - –ø–æ —Å—Ç–∞—Ç—É—Å—É\n");
        message.append("‚Ä¢ /filter_user [username] - –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é\n");
        message.append("‚Ä¢ /filter_amount [—Å—É–º–º–∞] - –ø–æ —Å—É–º–º–µ\n");

        lastMessageId.put(chatId, bot.sendMessageWithKeyboard(chatId, message.toString(), createAdminApplicationsKeyboard()));
    }


    private void showActiveApplications(Long chatId, User user, MyBot bot) {
        List<Application> activeApplications = applicationService.findActiveApplications();

        List<Application> sortedApplications = activeApplications.stream()
                .sorted(Comparator.comparing(Application::getIsVip).reversed()
                        .thenComparing(Application::getCreatedAt))
                .collect(Collectors.toList());

        if (sortedApplications.isEmpty()) {
            lastMessageId.put(chatId, bot.sendMessageWithKeyboard(chatId,
                    "üì≠ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫", createAdminMainMenuKeyboard()));
            return;
        }

        StringBuilder message = new StringBuilder("üìä –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞—è–≤–∫–∏ (–æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É):\n\n");

        for (int i = 0; i < sortedApplications.size(); i++) {
            Application app = sortedApplications.get(i);
            String userInfo = String.format("@%s (ID: %d)",
                    app.getUser().getUsername() != null ? app.getUser().getUsername() : "–Ω–µ—Ç_username",
                    app.getUser().getId());

            message.append(String.format("""
                            %d. %s #%d
                            üë§ %s
                            %s
                            üí∞ %.2f ‚ÇΩ
                            üïí %s
                            --------------------
                            """,
                    i + 1,
                    app.getIsVip() ? "üëë" : "üîπ",
                    app.getId(),
                    app.getUser().getFirstName(),
                    userInfo, // –î–û–ë–ê–í–õ–ï–ù–û
                    app.getCalculatedGiveValue(),
                    app.getCreatedAt().format(DateTimeFormatter.ofPattern("dd.MM.yy HH:mm"))
            ));
        }

        message.append("\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞—è–≤–∫–∏ –∏–∑ —Å–ø–∏—Å–∫–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:");

        lastMessageId.put(chatId, bot.sendMessageWithKeyboard(chatId, message.toString(), createBackToAdminKeyboard()));
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∑–∞—è–≤–∫–∏ –ø–æ –Ω–æ–º–µ—Ä—É –≤ –æ—á–µ—Ä–µ–¥–∏
    private void processAdminActiveApplicationsSelection(Long chatId, User user, String text, MyBot bot) {
        try {
            int queueNumber = Integer.parseInt(text);
            List<Application> activeApplications = applicationService.findActiveApplications();

            List<Application> sortedApplications = activeApplications.stream()
                    .sorted(Comparator.comparing(Application::getIsVip).reversed()
                            .thenComparing(Application::getCreatedAt))
                    .collect(Collectors.toList());

            if (queueNumber < 1 || queueNumber > sortedApplications.size()) {
                lastMessageId.put(chatId, bot.sendMessageWithKeyboard(chatId,
                        "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞—è–≤–∫–∏", createBackToAdminKeyboard()));
                return;
            }

            Application application = sortedApplications.get(queueNumber - 1);
            selectedApplication.put(user.getId(), application.getId());
            user.setState(UserState.ADMIN_VIEWING_APPLICATION_DETAILS);
            userService.update(user);
            showAdminApplicationDetails(chatId, user, application, bot);

        } catch (NumberFormatException e) {
            lastMessageId.put(chatId, bot.sendMessageWithKeyboard(chatId,
                    "‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä", createBackToAdminKeyboard()));
        }
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ "–°–ª–µ–¥—É—é—â–∞—è –∑–∞—è–≤–∫–∞"
    private void processNextApplication(Long chatId, User user, MyBot bot) {
        List<Application> activeApplications = applicationService.findActiveApplications();

        if (activeApplications.isEmpty()) {
            lastMessageId.put(chatId, bot.sendMessageWithKeyboard(chatId,
                    "üì≠ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫", createAdminMainMenuKeyboard()));
            return;
        }

        // –ë–µ—Ä–µ–º –ø–µ—Ä–≤—É—é –∑–∞—è–≤–∫—É –∏–∑ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
        Application nextApplication = activeApplications.stream()
                .sorted(Comparator.comparing(Application::getIsVip).reversed()
                        .thenComparing(Application::getCreatedAt))
                .findFirst()
                .orElse(null);

        if (nextApplication == null) {
            lastMessageId.put(chatId, bot.sendMessageWithKeyboard(chatId,
                    "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∑–∞—è–≤–∫–∏", createAdminMainMenuKeyboard()));
            return;
        }

        selectedApplication.put(user.getId(), nextApplication.getId());
        user.setState(UserState.ADMIN_VIEWING_APPLICATION_DETAILS);
        userService.update(user);
        showAdminApplicationDetails(chatId, user, nextApplication, bot);
    }

    // –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    private void processAdminUserSearch(Long chatId, User user, String text, MyBot bot) {
        if (text.equals("üîô –ù–∞–∑–∞–¥") || text.equals("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")) {
            user.setState(UserState.ADMIN_MAIN_MENU);
            userService.update(user);
            showAdminMainMenu(chatId, bot);
            return;
        }

        User foundUser = null;

        // –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ username
        if (!text.startsWith("@")) {
            // –ï—Å–ª–∏ –Ω–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å @, –ø—Ä–æ–±—É–µ–º –∫–∞–∫ username –±–µ–∑ @
            foundUser = userService.findByUsername(text);
        } else {
            // –ï—Å–ª–∏ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å @, —É–±–∏—Ä–∞–µ–º –µ–≥–æ
            foundUser = userService.findByUsername(text.substring(1));
        }

        // –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ ID
        if (foundUser == null) {
            try {
                Long userId = Long.parseLong(text);
                foundUser = userService.find(userId);
            } catch (NumberFormatException e) {
                // –ù–µ —á–∏—Å–ª–æ
            }
        }

        // –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ Telegram ID
        if (foundUser == null) {
            try {
                Long telegramId = Long.parseLong(text);
                foundUser = userService.findByTelegramId(telegramId);
            } catch (NumberFormatException e) {
                // –ù–µ —á–∏—Å–ª–æ
            }
        }

        if (foundUser == null) {
            lastMessageId.put(chatId, bot.sendMessageWithKeyboard(chatId,
                    "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ username –∏–ª–∏ ID –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:",
                    createBackToAdminKeyboard()));
            return;
        }

        showUserDetails(chatId, foundUser, bot);
    }

    private void showUserDetails(Long chatId, User user, MyBot bot) {
        String message = String.format("""
                        üë§ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:
                        
                        üÜî ID: %d
                        üìû Telegram ID: %d
                        üë§ –ò–º—è: %s %s
                        üì± Username: @%s
                        
                        üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:
                        ‚Ä¢ –í—Å–µ–≥–æ –∑–∞—è–≤–æ–∫: %d
                        ‚Ä¢ –£—Å–ø–µ—à–Ω—ã—Ö: %d
                        ‚Ä¢ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ: %.2f ‚ÇΩ
                        ‚Ä¢ –ü–æ–ª—É—á–µ–Ω–æ: %.2f ‚ÇΩ
                        ‚Ä¢ –ë–æ–Ω—É—Å–Ω—ã–π –±–∞–ª–∞–Ω—Å: %.2f ‚ÇΩ
                        
                        üìà –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞:
                        ‚Ä¢ –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ: %d
                        ‚Ä¢ –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: %.2f ‚ÇΩ
                        """,
                user.getId(),
                user.getTelegramId(),
                user.getFirstName(),
                user.getLastName() != null ? user.getLastName() : "",
                user.getUsername() != null ? user.getUsername() : "–Ω–µ—Ç",
                user.getTotalApplications(),
                user.getCompletedBuyApplications() + user.getCompletedSellApplications(),
                user.getTotalBuyAmount(),
                user.getTotalSellAmount(),
                user.getBonusBalance(),
                user.getReferralCount(),
                user.getReferralEarnings()
        );

        lastMessageId.put(chatId, bot.sendMessageWithKeyboard(chatId, message, createBackToAdminKeyboard()));
    }


    private void processAdminMainMenu(Long chatId, User user, String text, MyBot bot) {
        switch (text) {
            case "üìã –í—Å–µ –∑–∞—è–≤–∫–∏":
                user.setState(UserState.ADMIN_VIEW_ALL_APPLICATIONS);
                userService.update(user);
                showAllApplications(chatId, user, bot);
                break;
            case "üìä –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞—è–≤–∫–∏":
                user.setState(UserState.ADMIN_VIEW_ACTIVE_APPLICATIONS);
                userService.update(user);
                showActiveApplications(chatId, user, bot);
                break;
            case "‚è≠Ô∏è –°–ª–µ–¥—É—é—â–∞—è –∑–∞—è–≤–∫–∞":
                processNextApplication(chatId, user, bot);
                break;
            case "üë• –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è":
                user.setState(UserState.ADMIN_VIEW_USER_DETAILS);
                userService.update(user);
                lastMessageId.put(chatId, bot.sendMessageWithKeyboard(chatId,
                        "–í–≤–µ–¥–∏—Ç–µ username (–±–µ–∑ @) –∏–ª–∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", createBackToAdminKeyboard()));
                break;
            case "üé´ –°–æ–∑–¥–∞—Ç—å –∫—É–ø–æ–Ω":
                user.setState(UserState.ADMIN_CREATE_COUPON);
                userService.update(user);
                showCreateCouponMenu(chatId, bot);
                break;
            case "üí∞ –ö–æ–º–∏—Å—Å–∏–∏":
                user.setState(UserState.ADMIN_COMMISSION_SETTINGS);
                userService.update(user);
                showAdminCommissionSettings(chatId, user, bot);
                break;
            case "üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
                deletePreviousBotMessage(chatId, bot);
                user.setState(UserState.MAIN_MENU);
                userService.update(user);
                showMainMenu(chatId, user, bot);
                break;
            default:
                lastMessageId.put(chatId, bot.sendMessageWithKeyboard(chatId,
                        "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏", createAdminMainMenuKeyboard()));
        }
    }

    private void showAdminCommissionSettings(Long chatId, User user, MyBot bot) {
        String message = "üí∞ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–∏—Å—Å–∏—è–º–∏\n\n" +
                "–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:\n" +
                "‚Ä¢ 1000-1999 ‚ÇΩ: " + commissionConfig.getCommissionPercent(1000) + "%\n" +
                "‚Ä¢ 2000-2999 ‚ÇΩ: " + commissionConfig.getCommissionPercent(2000) + "%\n" +
                "‚Ä¢ 3000-4999 ‚ÇΩ: " + commissionConfig.getCommissionPercent(3000) + "%\n" +
                "‚Ä¢ 5000+ ‚ÇΩ: " + commissionConfig.getCommissionPercent(5000) + "%\n\n" +
                "–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤–≤–µ–¥–∏—Ç–µ:\n" +
                "‚Ä¢ –î–ª—è –¥–∏–∞–ø–∞–∑–æ–Ω–∞: 1000-1999 5\n" +
                "‚Ä¢ –î–ª—è –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Å—É–º–º—ã: 5000 2\n\n" +
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ 'üîô –ù–∞–∑–∞–¥' –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞";

        ReplyKeyboardMarkup keyboard = createBackToAdminKeyboard();
        lastMessageId.put(chatId, bot.sendMessageWithKeyboard(chatId, message, keyboard));
    }

    private void showCreateCouponMenu(Long chatId, MyBot bot) {
        String message = """
                üé´ –°–æ–∑–¥–∞–Ω–∏–µ –∫—É–ø–æ–Ω–∞
                
                –í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –∫—É–ø–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
                –∫–æ–¥ —Ç–∏–ø –∑–Ω–∞—á–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏–µ
                
                –ü—Ä–∏–º–µ—Ä—ã:
                SUMMER percent 10 –°–∫–∏–¥–∫–∞ 10% –Ω–∞ –ª–µ—Ç–æ
                BONUS amount 500 –ë–æ–Ω—É—Å 500 —Ä—É–±–ª–µ–π
                VIP percent 15 VIP —Å–∫–∏–¥–∫–∞ 15%
                
                –¢–∏–ø—ã: percent (–ø—Ä–æ—Ü–µ–Ω—Ç) –∏–ª–∏ amount (—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—É–º–º–∞)
                """;

        lastMessageId.put(chatId, bot.sendMessageWithKeyboard(chatId, message, createBackToAdminKeyboard()));
    }

    private void processCreateCoupon(Long chatId, User user, String text, MyBot bot) {
        if (text.equals("üîô –ù–∞–∑–∞–¥") || text.equals("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")) {
            user.setState(UserState.ADMIN_MAIN_MENU);
            userService.update(user);
            showAdminMainMenu(chatId, bot);
            return;
        }

        try {
            String[] parts = text.split(" ", 4);
            if (parts.length < 4) {
                throw new IllegalArgumentException("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤. –§–æ—Ä–º–∞—Ç: –∫–æ–¥ —Ç–∏–ø –∑–Ω–∞—á–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏–µ");
            }

            String code = parts[0];
            String type = parts[1];
            double value = Double.parseDouble(parts[2]);
            String description = parts[3];

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –∫—É–ø–æ–Ω —Å —Ç–∞–∫–∏–º –∫–æ–¥–æ–º
            if (couponService.findByCode(code).isPresent()) {
                throw new IllegalArgumentException("–ö—É–ø–æ–Ω —Å –∫–æ–¥–æ–º " + code + " —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç");
            }

            Coupon coupon = new Coupon();
            coupon.setCode(code.toUpperCase());
            coupon.setDescription(description);
            coupon.setIsActive(true);
            coupon.setIsUsed(false);

            if ("percent".equalsIgnoreCase(type)) {
                if (value <= 0 || value > 100) {
                    throw new IllegalArgumentException("–ü—Ä–æ—Ü–µ–Ω—Ç —Å–∫–∏–¥–∫–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 100");
                }
                coupon.setDiscountPercent(value);
            } else if ("amount".equalsIgnoreCase(type)) {
                if (value <= 0) {
                    throw new IllegalArgumentException("–°—É–º–º–∞ —Å–∫–∏–¥–∫–∏ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0");
                }
                coupon.setDiscountAmount(value);
            } else {
                throw new IllegalArgumentException("–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø —Å–∫–∏–¥–∫–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ 'percent' –∏–ª–∏ 'amount'");
            }

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫—É–ø–æ–Ω
            couponService.createCoupon(coupon);

            String message = String.format("""
                            ‚úÖ –ö—É–ø–æ–Ω —Å–æ–∑–¥–∞–Ω!
                            
                            üé´ –ö–æ–¥: %s
                            üí∞ –°–∫–∏–¥–∫–∞: %s
                            üìù –û–ø–∏—Å–∞–Ω–∏–µ: %s
                            """,
                    coupon.getCode(),
                    coupon.getDiscountPercent() != null ?
                            coupon.getDiscountPercent() + "%" : coupon.getDiscountAmount() + " ‚ÇΩ",
                    coupon.getDescription()
            );

            lastMessageId.put(chatId, bot.sendMessageWithKeyboard(chatId, message, createAdminMainMenuKeyboard()));

            user.setState(UserState.ADMIN_MAIN_MENU);
            userService.update(user);

        } catch (Exception e) {
            String errorMessage = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫—É–ø–æ–Ω–∞: " + e.getMessage() +
                    "\n\n–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç:\n" +
                    "–∫–æ–¥ —Ç–∏–ø –∑–Ω–∞—á–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏–µ\n\n" +
                    "–ü—Ä–∏–º–µ—Ä—ã:\n" +
                    "SUMMER percent 10 –°–∫–∏–¥–∫–∞ 10% –Ω–∞ –ª–µ—Ç–æ\n" +
                    "BONUS amount 500 –ë–æ–Ω—É—Å 500 —Ä—É–±–ª–µ–π\n\n" +
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:";

            lastMessageId.put(chatId, bot.sendMessageWithKeyboard(chatId, errorMessage, createBackToAdminKeyboard()));
        }

        try {
            String[] parts = text.split(" ", 4);
            if (parts.length < 4) {
                throw new IllegalArgumentException("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤");
            }

            String code = parts[0];
            String type = parts[1];
            double value = Double.parseDouble(parts[2]);
            String description = parts[3];

            Coupon coupon = new Coupon();
            coupon.setCode(code.toUpperCase());
            coupon.setDescription(description);
            coupon.setIsActive(true);
            coupon.setIsUsed(false);

            if ("percent".equalsIgnoreCase(type)) {
                coupon.setDiscountPercent(value);
            } else if ("amount".equalsIgnoreCase(type)) {
                coupon.setDiscountAmount(value);
            } else {
                throw new IllegalArgumentException("–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø —Å–∫–∏–¥–∫–∏");
            }

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫—É–ø–æ–Ω
            couponService.createCoupon(coupon);

            String message = String.format("""
                            ‚úÖ –ö—É–ø–æ–Ω —Å–æ–∑–¥–∞–Ω!
                            
                            üé´ –ö–æ–¥: %s
                            üí∞ –°–∫–∏–¥–∫–∞: %s
                            üìù –û–ø–∏—Å–∞–Ω–∏–µ: %s
                            """,
                    coupon.getCode(),
                    coupon.getDiscountPercent() != null ?
                            coupon.getDiscountPercent() + "%" : coupon.getDiscountAmount() + " ‚ÇΩ",
                    coupon.getDescription()
            );

            lastMessageId.put(chatId, bot.sendMessageWithKeyboard(chatId, message, createBackToAdminKeyboard()));

            user.setState(UserState.ADMIN_MAIN_MENU);
            userService.update(user);

        } catch (Exception e) {
            lastMessageId.put(chatId, bot.sendMessageWithKeyboard(chatId,
                    "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫—É–ø–æ–Ω–∞: " + e.getMessage() + "\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:",
                    createBackToAdminKeyboard()));
        }
    }


    private void showAdminStatistics(Long chatId, User user, MyBot bot) {
        List<Application> allApplications = applicationService.findAll();
        Map<ApplicationStatus, Long> statusCount = allApplications.stream()
                .collect(Collectors.groupingBy(Application::getStatus, Collectors.counting()));

        int totalUsers = userService.getActiveUsersCount();
        int totalApplications = allApplications.size();

        String message = String.format("""
                        üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã:
                        
                        üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: %d
                        üìã –í—Å–µ–≥–æ –∑–∞—è–≤–æ–∫: %d
                        
                        üìà –°—Ç–∞—Ç—É—Å—ã –∑–∞—è–≤–æ–∫:
                        üü¢ –°–≤–æ–±–æ–¥–Ω—ã: %d
                        üü° –í —Ä–∞–±–æ—Ç–µ: %d
                        üîµ –ó–∞–∫—Ä—ã—Ç—ã: %d
                        üî¥ –û—Ç–º–µ–Ω–µ–Ω—ã: %d
                        """,
                totalUsers,
                totalApplications,
                statusCount.getOrDefault(ApplicationStatus.FREE, 0L),
                statusCount.getOrDefault(ApplicationStatus.IN_WORK, 0L),
                statusCount.getOrDefault(ApplicationStatus.COMPLETED, 0L),
                statusCount.getOrDefault(ApplicationStatus.CANCELLED, 0L)
        );

        lastMessageId.put(chatId, bot.sendMessageWithKeyboard(chatId, message, createAdminMainMenuKeyboard()));
    }

    private void showAdminUsers(Long chatId, User user, MyBot bot) {
        String message = "üë• –†–∞–∑–¥–µ–ª —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ";
        lastMessageId.put(chatId, bot.sendMessageWithKeyboard(chatId, message, createAdminMainMenuKeyboard()));
    }

    private void processAdminViewingAllApplications(Long chatId, User user, MyBot bot) {
        List<Application> activeApplications = applicationService.findActiveApplications();

        if (activeApplications.isEmpty()) {
            String message = "üì≠ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫.";
            lastMessageId.put(chatId, bot.sendMessageWithKeyboard(chatId, message, createAdminMainMenuKeyboard()));
        } else {
            StringBuilder response = new StringBuilder("üìã –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞—è–≤–∫–∏:\n\n");

            for (Application app : activeApplications) {
                response.append(String.format("""
                                üÜî –ó–∞—è–≤–∫–∞ #%d
                                üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: %s (@%s)
                                üí∞ –¢–∏–ø: %s
                                üìä –°—Ç–∞—Ç—É—Å: %s
                                üí∏ –°—É–º–º–∞: %.2f ‚ÇΩ
                                ‚Çø Bitcoin: %.8f BTC
                                üìÖ –°–æ–∑–¥–∞–Ω–∞: %s
                                """,
                        app.getId(),
                        app.getUser().getFirstName(),
                        app.getUser().getUsername() != null ? app.getUser().getUsername() : "–Ω–µ—Ç username",
                        app.getTitle(),
                        app.getStatus().getDisplayName(),
                        app.getCalculatedGiveValue(),
                        app.getCalculatedGetValue(),
                        app.getCreatedAt().format(DateTimeFormatter.ofPattern("dd.MM.yyyy HH:mm"))
                ));

                response.append("--------------------\n");
            }

            response.append("\n–î–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–æ–π –≤–≤–µ–¥–∏—Ç–µ –µ—ë –Ω–æ–º–µ—Ä:");

            lastMessageId.put(chatId, bot.sendMessageWithKeyboard(chatId, response.toString(), createBackToAdminKeyboard()));
        }
    }

    private void processAdminApplicationSelection(Long chatId, User user, String text, MyBot bot) {
        try {
            Long applicationId = Long.parseLong(text);
            Application application = applicationService.find(applicationId);

            if (application == null) {
                lastMessageId.put(chatId, bot.sendMessageWithKeyboard(chatId, "‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", createAdminMainMenuKeyboard()));
                return;
            }

            selectedApplication.put(user.getId(), applicationId);
            user.setState(UserState.ADMIN_VIEWING_APPLICATION_DETAILS);
            userService.update(user);

            showAdminApplicationDetails(chatId, user, application, bot);

        } catch (NumberFormatException e) {
            lastMessageId.put(chatId, bot.sendMessageWithKeyboard(chatId, "‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞—è–≤–∫–∏", createBackToAdminKeyboard()));
        }
    }

    private void showAdminApplicationDetails(Long chatId, User user, Application application, MyBot bot) {
        String userInfo = String.format("@%s (ID: %d, TG: %d)",
                application.getUser().getUsername() != null ? application.getUser().getUsername() : "–Ω–µ—Ç_username",
                application.getUser().getId(),
                application.getUser().getTelegramId());

        String message = String.format("""
                        üìã –î–µ—Ç–∞–ª–∏ –∑–∞—è–≤–∫–∏ #%d
                        
                        üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: %s %s
                        %s
                        üí∞ –¢–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏: %s
                        üìä –°—Ç–∞—Ç—É—Å: %s
                        
                        üí∏ –û—Ç–¥–∞–µ—Ç: %.2f %s
                        üí∞ –ü–æ–ª—É—á–∞–µ—Ç: %.8f %s
                        
                        %s
                        üîê –ö–æ—à–µ–ª–µ–∫: %s
                        
                        üìÖ –°–æ–∑–¥–∞–Ω–∞: %s
                        üï∞Ô∏è –ò—Å—Ç–µ–∫–∞–µ—Ç: %s
                        """,
                application.getId(),
                application.getUser().getFirstName(),
                application.getUser().getLastName() != null ? application.getUser().getLastName() : "",
                userInfo, // –î–û–ë–ê–í–õ–ï–ù–û
                application.getTitle(),
                application.getStatus().getDisplayName(),
                application.getCalculatedGiveValue(),
                application.getUserValueGiveType().getDisplayName(),
                application.getCalculatedGetValue(),
                application.getUserValueGetType().getDisplayName(),
                application.getIsVip() ? "üëë VIP-–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç" : "üîπ –û–±—ã—á–Ω—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç",
                application.getWalletAddress(),
                application.getCreatedAt().format(DateTimeFormatter.ofPattern("dd.MM.yyyy HH:mm")),
                application.getFormattedExpiresAt()
        );

        if (application.getAppliedCoupon() != null) {
            message += String.format("\nüé´ –ü—Ä–∏–º–µ–Ω–µ–Ω –∫—É–ø–æ–Ω: %s", application.getAppliedCoupon().getCode());
        }

        ReplyKeyboardMarkup keyboard = createAdminApplicationActionsKeyboard();
        lastMessageId.put(chatId, bot.sendMessageWithKeyboard(chatId, message, keyboard));
    }

    private void processOtherMenu(Long chatId, User user, String text, MyBot bot) {
        switch (text) {
            case "üìã –ú–æ–∏ –∑–∞—è–≤–∫–∏":
                user.setState(UserState.VIEWING_APPLICATIONS);
                userService.update(user);
                processViewingApplications(chatId, user, bot);
                break;
            case "üé´ –ú–æ–∏ –∫—É–ø–æ–Ω—ã":
                user.setState(UserState.VIEWING_COUPONS);
                userService.update(user);
                processViewingCoupons(chatId, user, bot);
                break;
            case "üßÆ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä":
                user.setState(UserState.CALCULATOR_MENU);
                userService.update(user);
                showCalculatorMenu(chatId, user, bot);
                break;
            case "üìä –ö—É—Ä—Å—ã":
                showExchangeRates(chatId, user, bot);
                break;
            case "üë§ –ü—Ä–æ—Ñ–∏–ª—å":
                showProfile(chatId, user, bot);
                break;
            case "üìà –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞":
                user.setState(UserState.REFERRAL_MENU);
                userService.update(user);
                showReferralMenu(chatId, user, bot);
                break;
            case "üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
            case "üíé –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
                deletePreviousBotMessage(chatId, bot);
                user.setState(UserState.MAIN_MENU);
                userService.update(user);
                showMainMenu(chatId, user, bot);
                break;
            default:
                lastMessageId.put(chatId, bot.sendMessageWithKeyboard(chatId,
                        "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏", createOtherMenuKeyboard()));
        }
    }

    private void processCalculatorBuy(Long chatId, User user, String text, MyBot bot) {
        if (text.equals("üîô –ù–∞–∑–∞–¥")) {
            user.setState(UserState.CALCULATOR_MENU);
            userService.update(user);
            showCalculatorMenu(chatId, user, bot);
            return;
        }

        try {
            double rubAmount = Double.parseDouble(text);
            double btcPrice = cryptoPriceService.getCurrentPrice("BTC", "RUB");
            double btcAmount = rubAmount / btcPrice;
            double commission = commissionService.calculateCommission(rubAmount);
            double totalAmount = commissionService.calculateTotalWithCommission(rubAmount);

            String calculation = String.format("""
                            üßÆ –†–∞—Å—á–µ—Ç –ø–æ–∫—É–ø–∫–∏:
                            
                            üí∞ –í–≤–æ–¥–∏–º–∞—è —Å—É–º–º–∞: %.2f ‚ÇΩ
                            üí∏ –ö–æ–º–∏—Å—Å–∏—è: %.2f ‚ÇΩ (%.1f%%)
                            üíµ –ò—Ç–æ–≥–æ –∫ –æ–ø–ª–∞—Ç–µ: %.2f ‚ÇΩ
                            ‚Çø –í—ã –ø–æ–ª—É—á–∏—Ç–µ: %.8f BTC
                            
                            –ö—É—Ä—Å BTC: %.2f ‚ÇΩ
                            """,
                    rubAmount, commission, commissionService.getCommissionPercent(rubAmount),
                    totalAmount, btcAmount, btcPrice
            );

            lastMessageId.put(chatId, bot.sendMessageWithKeyboard(chatId, calculation, createCalculatorBackKeyboard()));

        } catch (NumberFormatException e) {
            lastMessageId.put(chatId, bot.sendMessageWithKeyboard(chatId,
                    "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ", createCalculatorBackKeyboard()));
        }
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç–æ–¥ –æ—Ç–º–µ–Ω—ã —á–µ—Ä–µ–∑ —Ç–µ–∫—Å—Ç–æ–≤—É—é –∫–æ–º–∞–Ω–¥—É
    private void cancelUserApplication(Long chatId, User user, Long applicationId, MyBot bot) {
        Application application = applicationService.find(applicationId);

        if (application == null || !application.getUser().getId().equals(user.getId())) {
            lastMessageId.put(chatId, bot.sendMessageWithKeyboard(chatId,
                    "‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –µ—ë –æ—Ç–º–µ–Ω—ã", createMainMenuKeyboard(user)));
            return;
        }

        if (application.getStatus() != ApplicationStatus.FREE && application.getStatus() != ApplicationStatus.IN_WORK) {
            lastMessageId.put(chatId, bot.sendMessageWithKeyboard(chatId,
                    "‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É —Å —Ç–µ–∫—É—â–∏–º —Å—Ç–∞—Ç—É—Å–æ–º: " + application.getStatus().getDisplayName(),
                    createMainMenuKeyboard(user)));
            return;
        }

        application.setStatus(ApplicationStatus.CANCELLED);
        applicationService.update(application);

        // –£–î–ê–õ–Ø–ï–ú —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞—è–≤–∫–æ–π –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
        if (application.getTelegramMessageId() != null) {
            bot.deleteMessage(chatId, application.getTelegramMessageId());
        }

        String message = "‚úÖ –ó–∞—è–≤–∫–∞ #" + applicationId + " —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞.";
        lastMessageId.put(chatId, bot.sendMessageWithKeyboard(chatId, message, createMainMenuKeyboard(user)));
    }

    private void processCalculatorMenu(Long chatId, User user, String text, MyBot bot) {
        switch (text) {
            case "üí∞ –ö—É–ø–∏—Ç—å BTC":
                user.setState(UserState.CALCULATOR_BUY);
                userService.update(user);
                lastMessageId.put(chatId, bot.sendMessageWithKeyboard(chatId,
                        "üíé –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤ —Ä—É–±–ª—è—Ö –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞:", createCalculatorBackKeyboard()));
                break;
            case "üí∏ –ü—Ä–æ–¥–∞—Ç—å BTC":
                user.setState(UserState.CALCULATOR_SELL);
                userService.update(user);
                lastMessageId.put(chatId, bot.sendMessageWithKeyboard(chatId,
                        "üíé –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ BTC –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞:", createCalculatorBackKeyboard()));
                break;
            case "üîô –ù–∞–∑–∞–¥":
                user.setState(UserState.OTHER_MENU);
                userService.update(user);
                showOtherMenu(chatId, user, bot);
                break;
            default:
                lastMessageId.put(chatId, bot.sendMessageWithKeyboard(chatId,
                        "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏", createCalculatorMenuKeyboard()));
        }
    }

    private void showCalculatorMenu(Long chatId, User user, MyBot bot) {
        String message = "üßÆ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–∞—Å—á–µ—Ç–∞:";
        ReplyKeyboardMarkup keyboard = createCalculatorMenuKeyboard();
        lastMessageId.put(chatId, bot.sendMessageWithKeyboard(chatId, message, keyboard));
    }

    private void processReferralMenu(Long chatId, User user, String text, MyBot bot) {
        switch (text) {
            case "–°–æ–∑–¥–∞—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥":
                user.setState(UserState.CREATING_REFERRAL_CODE);
                userService.update(user);
                lastMessageId.put(chatId, bot.sendMessageWithKeyboard(chatId,
                        "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≤–∞—à–µ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: '–î–ª—è –¥—Ä—É–∑–µ–π' –∏–ª–∏ '–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ'):",
                        createBackKeyboard()));
                break;
            case "üîô –ù–∞–∑–∞–¥":
                user.setState(UserState.OTHER_MENU);
                userService.update(user);
                showOtherMenu(chatId, user, bot);
                break;
            case "üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
                processMainMenu(chatId, user, bot);
                break;
            default:
                lastMessageId.put(chatId, bot.sendMessageWithKeyboard(chatId,
                        "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏", createReferralMenuKeyboard()));
        }
    }

    private void showReferralMenu(Long chatId, User user, MyBot bot) {
        user = userService.find(user.getId());
        Long referralCount = referralService.getUserReferralCount(user.getId());
        List<ReferralCode> userCodes = referralService.getUserReferralCodes(user.getId());

        StringBuilder message = new StringBuilder();
        message.append("üìà –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞\n\n");
        message.append(String.format("üë• –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: %d\n", referralCount));
        message.append(String.format("üí∞ –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: %.2f ‚ÇΩ\n\n", user.getReferralEarnings()));

        if (user.getUsedReferralCode() != null) {
            message.append(String.format("‚úÖ –í—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥: %s\n\n", user.getUsedReferralCode()));
        }

        message.append("–í–∞—à–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ –∫–æ–¥—ã:\n");
        if (userCodes.isEmpty()) {
            message.append("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö –∫–æ–¥–æ–≤.\n");
        } else {
            for (ReferralCode code : userCodes) {
                message.append(String.format("üî∏ –ö–æ–¥: %s (–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π: %d)\n",
                        code.getCode(), code.getUsages().size()));
            }
        }

        ReplyKeyboardMarkup keyboard = createReferralMenuKeyboard();
        lastMessageId.put(chatId, bot.sendMessageWithKeyboard(chatId, message.toString(), keyboard));
    }

    private void processCreatingReferralCode(Long chatId, User user, String text, MyBot bot) {
        if (text.equals("üîô –ù–∞–∑–∞–¥") || text.equals("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")) {
            user.setState(UserState.REFERRAL_MENU);
            userService.update(user);
            showReferralMenu(chatId, user, bot);
            return;
        }

        try {
            ReferralCode referralCode = referralService.createReferralCode(user);

            String message = String.format("""
                            ‚úÖ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥ —Å–æ–∑–¥–∞–Ω!
                            
                            üî∏ –í–∞—à –∫–æ–¥: %s
                            
                            –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –¥–µ–ª–∏—Ç—å—Å—è —ç—Ç–∏–º –∫–æ–¥–æ–º —Å –¥—Ä—É–∑—å—è–º–∏. 
                            –ó–∞ –∫–∞–∂–¥—É—é —É—Å–ø–µ—à–Ω—É—é –∑–∞—è–≤–∫—É —Ä–µ—Ñ–µ—Ä–∞–ª–∞ –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å %.2f%% –æ—Ç —Å—É–º–º—ã –∑–∞—è–≤–∫–∏.
                            """,
                    referralCode.getCode(),
                    referralCode.getRewardPercent());

            lastMessageId.put(chatId, bot.sendMessageWithKeyboard(chatId, message, createReferralMenuKeyboard()));

            user.setState(UserState.REFERRAL_MENU);
            userService.update(user);

        } catch (Exception e) {
            lastMessageId.put(chatId, bot.sendMessageWithKeyboard(chatId,
                    "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                    createBackKeyboard()));
        }
    }

    private void processEnteringReferralCode(Long chatId, User user, String text, MyBot bot) {
        if (text.equals("üîô –ù–∞–∑–∞–¥") || text.equals("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")) {
            user.setState(UserState.MAIN_MENU);
            userService.update(user);
            showMainMenu(chatId, user, bot);
            return;
        }

        boolean success = referralService.useReferralCode(text.trim(), user);
        if (success) {
            user = userService.find(user.getId());

            String message = "‚úÖ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥ —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!\n\n" +
                    "–¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –±–æ–Ω—É—Å—ã –∑–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã—Ö –¥—Ä—É–∑–µ–π.\n" +
                    "–°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ –≤ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–µ!";

            lastMessageId.put(chatId, bot.sendMessageWithKeyboard(chatId, message, createMainMenuKeyboard(user)));

            user.setState(UserState.MAIN_MENU);
            userService.update(user);
        } else {
            String message = "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥ –∏–ª–∏ –æ–Ω —É–∂–µ –±—ã–ª –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω.\n\n" +
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–¥ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.";
            lastMessageId.put(chatId, bot.sendMessageWithKeyboard(chatId, message, createBackKeyboard()));
        }
    }

    // –ú–µ—Ç–æ–¥—ã —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≤—ã—Ö–æ–¥–∞
    private InlineKeyboardMarkup createCaptchaKeyboard(List<String> options) {
        InlineKeyboardMarkup markup = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> rows = new ArrayList<>();

        // –°–æ–∑–¥–∞–µ–º 4 —Å—Ç—Ä–æ–∫–∏ –ø–æ 2 –∫–Ω–æ–ø–∫–∏ –≤ –∫–∞–∂–¥–æ–π (–∏—Ç–æ–≥–æ 8 –∫–Ω–æ–ø–æ–∫)
        for (int i = 0; i < options.size(); i += 2) {
            List<InlineKeyboardButton> row = new ArrayList<>();
            for (int j = i; j < i + 2 && j < options.size(); j++) {
                String emoji = options.get(j);
                InlineKeyboardButton button = new InlineKeyboardButton();
                button.setText(emoji);
                button.setCallbackData("captcha_" + emoji);
                row.add(button);
            }
            rows.add(row);
        }

        markup.setKeyboard(rows);
        return markup;
    }

    private ReplyKeyboardMarkup createMainMenuKeyboard(User user) {
        ReplyKeyboardMarkup keyboard = new ReplyKeyboardMarkup();
        keyboard.setResizeKeyboard(true);
        keyboard.setOneTimeKeyboard(false);

        List<KeyboardRow> rows = new ArrayList<>();

        // –ü–µ—Ä–≤—ã–π —Ä—è–¥ - –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
        KeyboardRow row1 = new KeyboardRow();
        row1.add("üí∞ –ö—É–ø–∏—Ç—å");
        row1.add("üí∏ –ü—Ä–æ–¥–∞—Ç—å");

        // –í—Ç–æ—Ä–æ–π —Ä—è–¥
        KeyboardRow row2 = new KeyboardRow();
        row2.add("üí≥ –ö–æ–º–∏—Å—Å–∏–∏");
        row2.add("‚öôÔ∏è –ü—Ä–æ—á–µ–µ");

        rows.add(row1);
        rows.add(row2);

        // –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –∫–Ω–æ–ø–∫–∞ (–µ—Å–ª–∏ –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞)
        if (user.getUsedReferralCode() == null) {
            KeyboardRow referralRow = new KeyboardRow();
            referralRow.add("üé´ –í–≤–µ—Å—Ç–∏ —Ä–µ—Ñ. –∫–æ–¥");
            rows.add(referralRow);
        }

        // –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å
        if (adminConfig.isAdmin(user.getId())) {
            KeyboardRow adminRow = new KeyboardRow();
            adminRow.add("üë®‚Äçüíº –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å");
            rows.add(adminRow);
        }

        keyboard.setKeyboard(rows);
        return keyboard;
    }

    private ReplyKeyboardMarkup createAdminApplicationActionsKeyboard() {
        ReplyKeyboardMarkup keyboard = new ReplyKeyboardMarkup();
        keyboard.setResizeKeyboard(true);
        keyboard.setOneTimeKeyboard(false);

        List<KeyboardRow> rows = new ArrayList<>();

        KeyboardRow row1 = new KeyboardRow();
        row1.add("üü° –í —Ä–∞–±–æ—Ç—É");
        row1.add("‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ"); // –ó–ê–ú–ï–ù–ê: –±—ã–ª–æ "üîµ –ó–∞–∫—Ä—ã—Ç—å"

        KeyboardRow row2 = new KeyboardRow();
        row2.add("üî¥ –û—Ç–º–µ–Ω–∏—Ç—å");
        row2.add("üü¢ –°–≤–æ–±–æ–¥–Ω–∞");

        KeyboardRow row3 = new KeyboardRow();
        row3.add("üìã –í—Å–µ –∑–∞—è–≤–∫–∏");
        row3.add("üîô –ù–∞–∑–∞–¥");

        KeyboardRow row4 = new KeyboardRow();
        row4.add("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é");

        rows.add(row1);
        rows.add(row2);
        rows.add(row3);
        rows.add(row4);

        keyboard.setKeyboard(rows);
        return keyboard;
    }

    private ReplyKeyboardMarkup createBuyMenuKeyboard() {
        ReplyKeyboardMarkup keyboard = new ReplyKeyboardMarkup();
        keyboard.setResizeKeyboard(true);
        keyboard.setOneTimeKeyboard(false);

        List<KeyboardRow> rows = new ArrayList<>();

        KeyboardRow row1 = new KeyboardRow();
        row1.add("–í–≤–µ—Å—Ç–∏ —Å—É–º–º—É –≤ RUB");
        row1.add("–í–≤–µ—Å—Ç–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ BTC");

        KeyboardRow row2 = new KeyboardRow();
        row2.add("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é");

        rows.add(row1);
        rows.add(row2);

        keyboard.setKeyboard(rows);
        return keyboard;
    }

    private ReplyKeyboardMarkup createSellMenuKeyboard() {
        ReplyKeyboardMarkup keyboard = new ReplyKeyboardMarkup();
        keyboard.setResizeKeyboard(true);
        keyboard.setOneTimeKeyboard(false);

        List<KeyboardRow> rows = new ArrayList<>();

        KeyboardRow row1 = new KeyboardRow();
        row1.add("–í–≤–µ—Å—Ç–∏ —Å—É–º–º—É");

        KeyboardRow row2 = new KeyboardRow();
        row2.add("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é");

        rows.add(row1);
        rows.add(row2);

        keyboard.setKeyboard(rows);
        return keyboard;
    }

    private ReplyKeyboardMarkup createAmountInputKeyboard() {
        ReplyKeyboardMarkup keyboard = new ReplyKeyboardMarkup();
        keyboard.setResizeKeyboard(true);
        keyboard.setOneTimeKeyboard(false);

        List<KeyboardRow> rows = new ArrayList<>();

        KeyboardRow row1 = new KeyboardRow();
        row1.add("üîô –ù–∞–∑–∞–¥");
        row1.add("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é");

        rows.add(row1);

        keyboard.setKeyboard(rows);
        return keyboard;
    }

    private ReplyKeyboardMarkup createCouponApplicationKeyboard() {
        ReplyKeyboardMarkup keyboard = new ReplyKeyboardMarkup();
        keyboard.setResizeKeyboard(true);
        keyboard.setOneTimeKeyboard(false);

        List<KeyboardRow> rows = new ArrayList<>();

        KeyboardRow row1 = new KeyboardRow();
        row1.add("–ü—Ä–∏–º–µ–Ω–∏—Ç—å –∫—É–ø–æ–Ω");
        row1.add("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å");

        KeyboardRow row2 = new KeyboardRow();
        row2.add("üîô –ù–∞–∑–∞–¥");
        row2.add("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é");

        rows.add(row1);
        rows.add(row2);

        keyboard.setKeyboard(rows);
        return keyboard;
    }

    private ReplyKeyboardMarkup createCalculatorMenuKeyboard() {
        ReplyKeyboardMarkup keyboard = new ReplyKeyboardMarkup();
        keyboard.setResizeKeyboard(true);
        keyboard.setOneTimeKeyboard(false);

        List<KeyboardRow> rows = new ArrayList<>();

        KeyboardRow row1 = new KeyboardRow();
        row1.add("üí∞ –ö—É–ø–∏—Ç—å BTC");
        row1.add("üí∏ –ü—Ä–æ–¥–∞—Ç—å BTC");

        KeyboardRow row2 = new KeyboardRow();
        row2.add("üîô –ù–∞–∑–∞–¥");

        rows.add(row1);
        rows.add(row2);

        keyboard.setKeyboard(rows);
        return keyboard;
    }

    private ReplyKeyboardMarkup createBackKeyboard() {
        ReplyKeyboardMarkup keyboard = new ReplyKeyboardMarkup();
        keyboard.setResizeKeyboard(true);
        keyboard.setOneTimeKeyboard(false);

        List<KeyboardRow> rows = new ArrayList<>();

        KeyboardRow row1 = new KeyboardRow();
        row1.add("üîô –ù–∞–∑–∞–¥");
        row1.add("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é");

        rows.add(row1);

        keyboard.setKeyboard(rows);
        return keyboard;
    }

    private ReplyKeyboardMarkup createBackToAdminKeyboard() {
        ReplyKeyboardMarkup keyboard = new ReplyKeyboardMarkup();
        keyboard.setResizeKeyboard(true);
        keyboard.setOneTimeKeyboard(false);

        List<KeyboardRow> rows = new ArrayList<>();

        KeyboardRow row1 = new KeyboardRow();
        row1.add("üîô –ù–∞–∑–∞–¥");
        row1.add("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é");

        rows.add(row1);

        keyboard.setKeyboard(rows);
        return keyboard;
    }

    private ReplyKeyboardMarkup createOtherMenuKeyboard() {
        ReplyKeyboardMarkup keyboard = new ReplyKeyboardMarkup();
        keyboard.setResizeKeyboard(true);
        keyboard.setOneTimeKeyboard(false);

        List<KeyboardRow> rows = new ArrayList<>();

        KeyboardRow row1 = new KeyboardRow();
        row1.add("üìã –ú–æ–∏ –∑–∞—è–≤–∫–∏");
        row1.add("üé´ –ú–æ–∏ –∫—É–ø–æ–Ω—ã");

        KeyboardRow row2 = new KeyboardRow();
        row2.add("üßÆ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä");
        row2.add("üìä –ö—É—Ä—Å—ã");

        KeyboardRow row3 = new KeyboardRow();
        row3.add("üë§ –ü—Ä–æ—Ñ–∏–ª—å");
        row3.add("üìà –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞");

        KeyboardRow row4 = new KeyboardRow();
        row4.add("üíé –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é");

        rows.add(row1);
        rows.add(row2);
        rows.add(row3);
        rows.add(row4);

        keyboard.setKeyboard(rows);
        return keyboard;
    }

    private ReplyKeyboardMarkup createAdminMainMenuKeyboard() {
        ReplyKeyboardMarkup keyboard = new ReplyKeyboardMarkup();
        keyboard.setResizeKeyboard(true);
        keyboard.setOneTimeKeyboard(false);

        List<KeyboardRow> rows = new ArrayList<>();

        KeyboardRow row1 = new KeyboardRow();
        row1.add("üìã –í—Å–µ –∑–∞—è–≤–∫–∏");
        row1.add("üìä –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞—è–≤–∫–∏");

        KeyboardRow row2 = new KeyboardRow();
        row2.add("‚è≠Ô∏è –°–ª–µ–¥—É—é—â–∞—è –∑–∞—è–≤–∫–∞");
        row2.add("üë• –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è");

        KeyboardRow row3 = new KeyboardRow();
        row3.add("üé´ –°–æ–∑–¥–∞—Ç—å –∫—É–ø–æ–Ω");
        row3.add("üí∞ –ö–æ–º–∏—Å—Å–∏–∏");

        KeyboardRow row4 = new KeyboardRow();
        row4.add("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é");

        rows.add(row1);
        rows.add(row2);
        rows.add(row3);
        rows.add(row4);

        keyboard.setKeyboard(rows);
        return keyboard;
    }

    private ReplyKeyboardMarkup createVipConfirmationKeyboard() {
        ReplyKeyboardMarkup keyboard = new ReplyKeyboardMarkup();
        keyboard.setResizeKeyboard(true);
        keyboard.setOneTimeKeyboard(false);

        List<KeyboardRow> rows = new ArrayList<>();

        KeyboardRow row1 = new KeyboardRow();
        row1.add("üëë –î–∞, –¥–æ–±–∞–≤–∏—Ç—å VIP");
        row1.add("üîπ –ù–µ—Ç, –æ–±—ã—á–Ω—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç");

        KeyboardRow row2 = new KeyboardRow();
        row2.add("üîô –ù–∞–∑–∞–¥");
        row2.add("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é");

        rows.add(row1);
        rows.add(row2);

        keyboard.setKeyboard(rows);
        return keyboard;
    }

    private ReplyKeyboardMarkup createWalletInputKeyboard() {
        ReplyKeyboardMarkup keyboard = new ReplyKeyboardMarkup();
        keyboard.setResizeKeyboard(true);
        keyboard.setOneTimeKeyboard(false);

        List<KeyboardRow> rows = new ArrayList<>();

        KeyboardRow row1 = new KeyboardRow();
        row1.add("üîô –ù–∞–∑–∞–¥");
        row1.add("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é");

        rows.add(row1);

        keyboard.setKeyboard(rows);
        return keyboard;
    }

    private ReplyKeyboardMarkup createReferralMenuKeyboard() {
        ReplyKeyboardMarkup keyboard = new ReplyKeyboardMarkup();
        keyboard.setResizeKeyboard(true);
        keyboard.setOneTimeKeyboard(false);

        List<KeyboardRow> rows = new ArrayList<>();

        KeyboardRow row1 = new KeyboardRow();
        row1.add("–°–æ–∑–¥–∞—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥");

        KeyboardRow row2 = new KeyboardRow();
        row2.add("üîô –ù–∞–∑–∞–¥");
        row2.add("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é");

        rows.add(row1);
        rows.add(row2);

        keyboard.setKeyboard(rows);
        return keyboard;
    }

    private ReplyKeyboardMarkup createCalculatorBackKeyboard() {
        ReplyKeyboardMarkup keyboard = new ReplyKeyboardMarkup();
        keyboard.setResizeKeyboard(true);
        keyboard.setOneTimeKeyboard(false);

        List<KeyboardRow> rows = new ArrayList<>();

        KeyboardRow row1 = new KeyboardRow();
        row1.add("üîô –ù–∞–∑–∞–¥");

        rows.add(row1);

        keyboard.setKeyboard(rows);
        return keyboard;
    }

    private ReplyKeyboardMarkup createApplicationActionsKeyboard(Long applicationId) {
        ReplyKeyboardMarkup keyboard = new ReplyKeyboardMarkup();
        keyboard.setResizeKeyboard(true);
        keyboard.setOneTimeKeyboard(false);

        List<KeyboardRow> rows = new ArrayList<>();

        KeyboardRow row1 = new KeyboardRow();
        row1.add("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É #" + applicationId);

        KeyboardRow row2 = new KeyboardRow();
        row2.add("üìû –ù–∞–ø–∏—Å–∞—Ç—å –æ–ø–µ—Ä–∞—Ç–æ—Ä—É");

        KeyboardRow row3 = new KeyboardRow();
        row3.add("üíé –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é");

        rows.add(row1);
        rows.add(row2);
        rows.add(row3);

        keyboard.setKeyboard(rows);
        return keyboard;
    }

    private ReplyKeyboardMarkup createFinalConfirmationKeyboard() {
        ReplyKeyboardMarkup keyboard = new ReplyKeyboardMarkup();
        keyboard.setResizeKeyboard(true);
        keyboard.setOneTimeKeyboard(false);

        List<KeyboardRow> rows = new ArrayList<>();

        KeyboardRow row1 = new KeyboardRow();
        row1.add("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å");
        row1.add("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å");

        KeyboardRow row2 = new KeyboardRow();
        row2.add("üîô –ù–∞–∑–∞–¥");

        rows.add(row1);
        rows.add(row2);

        keyboard.setKeyboard(rows);
        return keyboard;
    }

    private InlineKeyboardMarkup createApplicationInlineKeyboard(Long applicationId) {
        InlineKeyboardMarkup markup = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> rows = new ArrayList<>();

        // –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞: –æ—Ç–º–µ–Ω–∞ –∏ –Ω–æ–º–µ—Ä –≤ –æ—á–µ—Ä–µ–¥–∏
        List<InlineKeyboardButton> row1 = new ArrayList<>();

        InlineKeyboardButton cancelButton = new InlineKeyboardButton();
        cancelButton.setText("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É");
        cancelButton.setCallbackData("cancel_app_" + applicationId);
        row1.add(cancelButton);

        InlineKeyboardButton queueButton = new InlineKeyboardButton();
        queueButton.setText("üìä –ù–æ–º–µ—Ä –≤ –æ—á–µ—Ä–µ–¥–∏");
        queueButton.setCallbackData("queue_app_" + applicationId);
        row1.add(queueButton);

        // –í—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞: –æ–ø–µ—Ä–∞—Ç–æ—Ä
        List<InlineKeyboardButton> row2 = new ArrayList<>();
        InlineKeyboardButton operatorButton = new InlineKeyboardButton();
        operatorButton.setText("üìû –ù–∞–ø–∏—Å–∞—Ç—å –æ–ø–µ—Ä–∞—Ç–æ—Ä—É");
        operatorButton.setUrl("https://t.me/cosanostra_support");
        row2.add(operatorButton);

        rows.add(row1);
        rows.add(row2);

        markup.setKeyboard(rows);
        return markup;
    }

    private ReplyKeyboardMarkup createAdminApplicationsKeyboard() {
        ReplyKeyboardMarkup keyboard = new ReplyKeyboardMarkup();
        keyboard.setResizeKeyboard(true);
        keyboard.setOneTimeKeyboard(false);

        List<KeyboardRow> rows = new ArrayList<>();

        KeyboardRow row1 = new KeyboardRow();
        row1.add("üìã –í—Å–µ –∑–∞—è–≤–∫–∏");
        row1.add("üìä –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞—è–≤–∫–∏");

        KeyboardRow row2 = new KeyboardRow();
        row2.add("‚è≠Ô∏è –°–ª–µ–¥—É—é—â–∞—è –∑–∞—è–≤–∫–∞");
        row2.add("üë• –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è");

        KeyboardRow row3 = new KeyboardRow();
        row3.add("üé´ –°–æ–∑–¥–∞—Ç—å –∫—É–ø–æ–Ω");
        row3.add("üí∞ –ö–æ–º–∏—Å—Å–∏–∏");

        KeyboardRow row4 = new KeyboardRow();
        row4.add("üìÖ –§–∏–ª—å—Ç—Ä –ø–æ –≤—Ä–µ–º–µ–Ω–∏");
        row4.add("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é");

        rows.add(row1);
        rows.add(row2);
        rows.add(row3);
        rows.add(row4);

        keyboard.setKeyboard(rows);
        return keyboard;
    }

    private InlineKeyboardMarkup createMainMenuInlineKeyboard(User user) {
        InlineKeyboardMarkup markup = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> rows = new ArrayList<>();

        // –ü–µ—Ä–≤—ã–π —Ä—è–¥ - –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
        List<InlineKeyboardButton> row1 = new ArrayList<>();
        InlineKeyboardButton buyButton = new InlineKeyboardButton();
        buyButton.setText("üí∞ –ö—É–ø–∏—Ç—å BTC");
        buyButton.setCallbackData("inline_buy");
        row1.add(buyButton);

        InlineKeyboardButton sellButton = new InlineKeyboardButton();
        sellButton.setText("üí∏ –ü—Ä–æ–¥–∞—Ç—å BTC");
        sellButton.setCallbackData("inline_sell");
        row1.add(sellButton);

        // –í—Ç–æ—Ä–æ–π —Ä—è–¥
        List<InlineKeyboardButton> row2 = new ArrayList<>();
        InlineKeyboardButton commissionsButton = new InlineKeyboardButton();
        commissionsButton.setText("üí≥ –ö–æ–º–∏—Å—Å–∏–∏");
        commissionsButton.setCallbackData("inline_commissions");
        row2.add(commissionsButton);

        InlineKeyboardButton otherButton = new InlineKeyboardButton();
        otherButton.setText("‚öôÔ∏è –ü—Ä–æ—á–µ–µ");
        otherButton.setCallbackData("inline_other");
        row2.add(otherButton);

        rows.add(row1);
        rows.add(row2);

        // –¢—Ä–µ—Ç–∏–π —Ä—è–¥ - —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –∫–Ω–æ–ø–∫–∞ (–µ—Å–ª–∏ –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞)
        if (user.getUsedReferralCode() == null) {
            List<InlineKeyboardButton> row3 = new ArrayList<>();
            InlineKeyboardButton referralButton = new InlineKeyboardButton();
            referralButton.setText("üé´ –í–≤–µ—Å—Ç–∏ —Ä–µ—Ñ. –∫–æ–¥");
            referralButton.setCallbackData("inline_referral");
            row3.add(referralButton);
            rows.add(row3);
        }

        // –ß–µ—Ç–≤–µ—Ä—Ç—ã–π —Ä—è–¥ - –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å
        if (adminConfig.isAdmin(user.getId())) {
            List<InlineKeyboardButton> row4 = new ArrayList<>();
            InlineKeyboardButton adminButton = new InlineKeyboardButton();
            adminButton.setText("üë®‚Äçüíº –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å");
            adminButton.setCallbackData("inline_admin");
            row4.add(adminButton);
            rows.add(row4);
        }

        markup.setKeyboard(rows);
        return markup;
    }
    private void processAdminTimeFilter(Long chatId, User user, MyBot bot) {
        String message = "üìÖ –§–∏–ª—å—Ç—Ä –∑–∞—è–≤–æ–∫ –ø–æ –≤—Ä–µ–º–µ–Ω–∏:\n\n" +
                "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞—è–≤–æ–∫:";

        ReplyKeyboardMarkup keyboard = createTimeFilterKeyboard();
        lastMessageId.put(chatId, bot.sendMessageWithKeyboard(chatId, message, keyboard));
    }

    private ReplyKeyboardMarkup createTimeFilterKeyboard() {
        ReplyKeyboardMarkup keyboard = new ReplyKeyboardMarkup();
        keyboard.setResizeKeyboard(true);
        keyboard.setOneTimeKeyboard(false);

        List<KeyboardRow> rows = new ArrayList<>();

        KeyboardRow row1 = new KeyboardRow();
        row1.add("üìÖ –°–µ–≥–æ–¥–Ω—è");
        row1.add("üìÖ –ó–∞ –Ω–µ–¥–µ–ª—é");

        KeyboardRow row2 = new KeyboardRow();
        row2.add("üìÖ –ó–∞ –º–µ—Å—è—Ü");
        row2.add("üìÖ –í—Å–µ –≤—Ä–µ–º—è");

        KeyboardRow row3 = new KeyboardRow();
        row3.add("üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω–∫—É");

        rows.add(row1);
        rows.add(row2);
        rows.add(row3);

        keyboard.setKeyboard(rows);
        return keyboard;
    }
    private String formatRubAmount(double amount) {
        return String.format("%.2f", amount);
    }

    private String formatBtcAmount(double amount) {
        return String.format("%.8f", amount);
    }
    private InlineKeyboardMarkup createProfileInlineKeyboard() {
        InlineKeyboardMarkup markup = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> rows = new ArrayList<>();

        List<InlineKeyboardButton> row1 = new ArrayList<>();
        InlineKeyboardButton backButton = new InlineKeyboardButton();
        backButton.setText("üîô –ù–∞–∑–∞–¥");
        backButton.setCallbackData("inline_back");
        row1.add(backButton);

        List<InlineKeyboardButton> row2 = new ArrayList<>();
        InlineKeyboardButton mainMenuButton = new InlineKeyboardButton();
        mainMenuButton.setText("üíé –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é");
        mainMenuButton.setCallbackData("inline_main_menu");
        row2.add(mainMenuButton);

        rows.add(row1);
        rows.add(row2);

        markup.setKeyboard(rows);
        return markup;
    }
}