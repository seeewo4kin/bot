package com.seeewo4kin.bot.Bot;

import com.seeewo4kin.bot.Config.AdminConfig;
import com.seeewo4kin.bot.Config.CommissionConfig;
import com.seeewo4kin.bot.Entity.Application;
import com.seeewo4kin.bot.Entity.Coupon;
import com.seeewo4kin.bot.Entity.ReferralCode;
import com.seeewo4kin.bot.Entity.User;
import com.seeewo4kin.bot.Enums.ApplicationStatus;
import com.seeewo4kin.bot.Enums.UserState;
import com.seeewo4kin.bot.Enums.ValueType;
import com.seeewo4kin.bot.ValueGettr.CryptoPriceService;
import com.seeewo4kin.bot.ValueGettr.ExchangeRateCache;
import com.seeewo4kin.bot.service.*;
import org.springframework.stereotype.Service;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.ReplyKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.KeyboardRow;

import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;
import java.util.stream.Collectors;

@Service
public class MessageProcessor {
    private final UserService userService;
    private final ApplicationService applicationService;
    private final CryptoPriceService cryptoPriceService;
    private final ExchangeRateCache exchangeRateCache;
    private final CaptchaService captchaService;
    private final CouponService couponService;
    private final AdminConfig adminConfig;
    private final CommissionService commissionService;
    private final ReferralService referralService;
    private final CommissionConfig commissionConfig;

    private final Map<Long, Application> temporaryApplications = new ConcurrentHashMap<>();
    private final Map<Long, String> currentOperation = new ConcurrentHashMap<>();
    private final Map<Long, Integer> lastMessageId = new ConcurrentHashMap<>();
    private final Map<Long, Long> selectedApplication = new ConcurrentHashMap<>(); // –î–ª—è –∞–¥–º–∏–Ω–æ–≤

    public MessageProcessor(UserService userService,
                            ApplicationService applicationService,
                            CryptoPriceService cryptoPriceService,
                            ExchangeRateCache exchangeRateCache,
                            CaptchaService captchaService,
                            CouponService couponService,
                            AdminConfig adminConfig,
                            CommissionService commissionService,
                            ReferralService referralService,
                            CommissionConfig commissionConfig) { // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä
        this.userService = userService;
        this.applicationService = applicationService;
        this.cryptoPriceService = cryptoPriceService;
        this.exchangeRateCache = exchangeRateCache;
        this.captchaService = captchaService;
        this.couponService = couponService;
        this.adminConfig = adminConfig;
        this.commissionService = commissionService;
        this.referralService = referralService;
        this.commissionConfig = commissionConfig;
    }

    public void processUpdate(Update update, MyBot bot) {
        // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞
        if (update.hasMessage()) {
            Long chatId = update.getMessage().getChatId();
            deletePreviousBotMessage(chatId, bot);
        } else if (update.hasCallbackQuery()) {
            Long chatId = update.getCallbackQuery().getMessage().getChatId();
            deletePreviousBotMessage(chatId, bot);
        }

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ callback'–æ–≤ –æ—Ç –∫–Ω–æ–ø–æ–∫
        if (update.hasCallbackQuery()) {
            processCallback(update, bot);
            return;
        }

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        if (update.hasMessage() && update.getMessage().hasText()) {
            processTextMessage(update, bot);
        }
    }

    private void deletePreviousBotMessage(Long chatId, MyBot bot) {
        Integer previousMessageId = lastMessageId.get(chatId);
        if (previousMessageId != null) {
            bot.deleteMessage(chatId, previousMessageId);
        }
    }

    private void processTextMessage(Update update, MyBot bot) {
        String text = update.getMessage().getText();
        Long chatId = update.getMessage().getChatId();
        Long telegramId = update.getMessage().getFrom().getId();

        // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        bot.deleteMessage(chatId, update.getMessage().getMessageId());

        User user = userService.findByTelegramId(telegramId);

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—Ç–º–µ–Ω—É –≤ –ª—é–±–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        if (text.equalsIgnoreCase("–æ—Ç–º–µ–Ω–∞") || text.equalsIgnoreCase("cancel") ||
                text.equals("/cancel") || text.equals("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")) {
            processMainMenu(chatId, user, bot);
            return;
        }

        if (user == null || user.getState() == UserState.START) {
            processCommand(update, bot);
        } else {
            processUserState(update, user, bot);
        }
    }

    private void processCommand(Update update, MyBot bot) {
        String text = update.getMessage().getText();
        Long chatId = update.getMessage().getChatId();
        Long telegramId = update.getMessage().getFrom().getId();

        User user = userService.findByTelegramId(telegramId);
        if (user == null) {
            user = userService.findOrCreateUser(update.getMessage().getFrom());
        }

        if ("/start".equals(text)) {
            processStartCommand(update, bot);
        } else {
            bot.sendMessageWithKeyboard(chatId, "‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞", createMainMenuKeyboard(user));
        }
    }

    private void processUserState(Update update, User user, MyBot bot) {
        Long chatId = update.getMessage().getChatId();
        String text = update.getMessage().getText();

        switch (user.getState()) {
            case CAPTCHA_CHECK:
                break;
            case MAIN_MENU:
                processMainMenuCommand(chatId, user, text, bot);
                break;
            case BUY_MENU:
                processBuyMenu(chatId, user, text, bot);
                break;
            case SELL_MENU:
                processSellMenu(chatId, user, text, bot);
                break;
            case ENTERING_BUY_AMOUNT_RUB:
                processEnteringBuyAmountRub(chatId, user, text, bot);
                break;
            case ENTERING_BUY_AMOUNT_BTC:
                processEnteringBuyAmountBtc(chatId, user, text, bot);
                break;
            case ENTERING_SELL_AMOUNT:
                processEnteringSellAmount(chatId, user, text, bot);
                break;
            case CONFIRMING_APPLICATION:
                processConfirmingApplication(chatId, user, text, bot);
                break;
            case VIEWING_APPLICATIONS:
                processViewingApplications(chatId, user, bot);
                break;
            case VIEWING_COUPONS:
                processViewingCoupons(chatId, user, bot);
                break;
            case VIEWING_QUEUE:
                processViewingQueue(chatId, user, bot);
                break;
            case ADMIN_MAIN_MENU:
                processAdminMainMenu(chatId, user, text, bot);
                break;
            case ADMIN_VIEWING_ALL_APPLICATIONS:
                processAdminApplicationSelection(chatId, user, text, bot);
                break;
            case ADMIN_VIEWING_APPLICATION_DETAILS:
                processAdminApplicationActions(chatId, user, text, bot);
                break;
            case APPLYING_COUPON:
                processApplyingCoupon(chatId, user, text, bot);
                break;
            case ADMIN_COMMISSION_SETTINGS:
                processAdminCommissionSettings(chatId, user, text, bot);
                break;

            // –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞
            case REFERRAL_MENU:
                processReferralMenu(chatId, user, text, bot);
                break;
            case CREATING_REFERRAL_CODE:
                processCreatingReferralCode(chatId, user, text, bot);
                break;
            case ENTERING_REFERRAL_CODE:
                processEnteringReferralCode(chatId, user, text, bot);
                break;

            // –ü—Ä–æ—á–µ–µ
            case OTHER_MENU:
                processOtherMenu(chatId, user, text, bot);
                break;
        }
    }
    private void processAdminApplicationActions(Long chatId, User user, String text, MyBot bot) {
        Long applicationId = selectedApplication.get(user.getId());
        if (applicationId == null) {
            processAdminViewingAllApplications(chatId, user, bot);
            return;
        }

        Application application = applicationService.find(applicationId);
        if (application == null) {
            lastMessageId.put(chatId, bot.sendMessageWithKeyboard(chatId, "‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", createAdminMainMenuKeyboard()));
            return;
        }

        ApplicationStatus previousStatus = application.getStatus();

        switch (text) {
            case "üü° –í —Ä–∞–±–æ—Ç—É":
                application.setStatus(ApplicationStatus.IN_WORK);
                break;
            case "üîµ –ó–∞–∫—Ä—ã—Ç—å":
                application.setStatus(ApplicationStatus.CLOSED);
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –∑–∞—è–≤–∫–∏
                updateUserStatistics(application);
                // –ù–∞—á–∏—Å–ª—è–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–µ –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ
                referralService.processReferralReward(application);
                break;
            case "üî¥ –û—Ç–º–µ–Ω–∏—Ç—å":
                application.setStatus(ApplicationStatus.CANCELLED);
                break;
            case "üü¢ –°–≤–æ–±–æ–¥–Ω–∞":
                application.setStatus(ApplicationStatus.FREE);
                break;
            case "üìã –í—Å–µ –∑–∞—è–≤–∫–∏":
                user.setState(UserState.ADMIN_VIEWING_ALL_APPLICATIONS);
                userService.update(user);
                processAdminViewingAllApplications(chatId, user, bot);
                return;
            case "üîô –ù–∞–∑–∞–¥":
                user.setState(UserState.ADMIN_VIEWING_ALL_APPLICATIONS);
                userService.update(user);
                processAdminViewingAllApplications(chatId, user, bot);
                return;
            case "üë®‚Äçüíº –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å": // –ù–æ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
                user.setState(UserState.ADMIN_MAIN_MENU);
                userService.update(user);
                showAdminMainMenu(chatId, bot);
                return;
            default:
                lastMessageId.put(chatId, bot.sendMessageWithKeyboard(chatId,
                        "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏", createAdminApplicationActionsKeyboard()));
                return;
        }

        applicationService.update(application);

        // –ï—Å–ª–∏ –∑–∞—è–≤–∫–∞ –∑–∞–∫—Ä—ã—Ç–∞ –∏–ª–∏ –æ—Ç–º–µ–Ω–µ–Ω–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∞–¥–º–∏–Ω–∞ –∫ —Å–ø–∏—Å–∫—É –∑–∞—è–≤–æ–∫
        if (application.getStatus() == ApplicationStatus.CLOSED ||
                application.getStatus() == ApplicationStatus.CANCELLED) {

            String message = String.format("‚úÖ –°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ #%d –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: %s",
                    applicationId, application.getStatus().getDisplayName());
            lastMessageId.put(chatId, bot.sendMessageWithKeyboard(chatId, message, createBackKeyboard()));

            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫ —Å–ø–∏—Å–∫—É –∑–∞—è–≤–æ–∫
            user.setState(UserState.ADMIN_VIEWING_ALL_APPLICATIONS);
            userService.update(user);
            processAdminViewingAllApplications(chatId, user, bot);
        } else {
            String message = String.format("‚úÖ –°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ #%d –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: %s",
                    applicationId, application.getStatus().getDisplayName());
            lastMessageId.put(chatId, bot.sendMessageWithKeyboard(chatId, message, createAdminApplicationActionsKeyboard()));
        }
    }
    private void updateUserStatistics(Application application) {
        User user = application.getUser();

        if (application.getStatus() == ApplicationStatus.CLOSED) {
            if (application.getUserValueGetType() == ValueType.BTC) {
                // –ü–æ–∫—É–ø–∫–∞ BTC - –Ω–∞—á–∏—Å–ª—è–µ–º 1% –∫–µ—à–±–µ–∫–∞
                user.setCompletedBuyApplications(user.getCompletedBuyApplications() + 1);
                user.setTotalBuyAmount(user.getTotalBuyAmount() + application.getCalculatedGiveValue());

                // –ö–µ—à–±–µ–∫ 1% –æ—Ç —Å—É–º–º—ã –ø–æ–∫—É–ø–∫–∏
                double cashback = application.getCalculatedGiveValue() * 0.01;
                user.setBonusBalance(user.getBonusBalance() + cashback);

            } else {
                // –ü—Ä–æ–¥–∞–∂–∞ BTC - –Ω–∞—á–∏—Å–ª—è–µ–º 0.5% –∫–µ—à–±–µ–∫–∞
                user.setCompletedSellApplications(user.getCompletedSellApplications() + 1);
                user.setTotalSellAmount(user.getTotalSellAmount() + application.getCalculatedGetValue());

                // –ö–µ—à–±–µ–∫ 0.5% –æ—Ç —Å—É–º–º—ã –ø—Ä–æ–¥–∞–∂–∏
                double cashback = application.getCalculatedGetValue() * 0.005;
                user.setBonusBalance(user.getBonusBalance() + cashback);
            }

            user.setTotalApplications(user.getTotalApplications() + 1);
            userService.update(user);
        }
    }
    private void processAdminCommissionSettings(Long chatId, User user, String text, MyBot bot) {
        if (text.equals("üîô –ù–∞–∑–∞–¥") || text.equals("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")) {
            user.setState(UserState.ADMIN_MAIN_MENU);
            userService.update(user);
            showAdminMainMenu(chatId, bot);
            return;
        }

        // –ü–∞—Ä—Å–∏–º –∫–æ–º–∞–Ω–¥—É –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–º–∏—Å—Å–∏–π
        try {
            // –§–æ—Ä–º–∞—Ç: "1000-1999 5" –∏–ª–∏ "5000 2"
            String[] parts = text.split(" ");
            if (parts.length == 2) {
                String rangeStr = parts[0];
                double percent = Double.parseDouble(parts[1]);

                if (rangeStr.contains("-")) {
                    // –î–∏–∞–ø–∞–∑–æ–Ω: "1000-1999"
                    String[] rangeParts = rangeStr.split("-");
                    double min = Double.parseDouble(rangeParts[0]);
                    double max = Double.parseDouble(rangeParts[1]);

                    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–º–∏—Å—Å–∏—é –≤ –∫–æ–Ω—Ñ–∏–≥–µ
                    commissionConfig.updateCommissionRange(min, percent);

                    String message = String.format("‚úÖ –ö–æ–º–∏—Å—Å–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞!\n\n–î–∏–∞–ø–∞–∑–æ–Ω: %.0f-%.0f ‚ÇΩ\n–ö–æ–º–∏—Å—Å–∏—è: %.1f%%",
                            min, max, percent);
                    lastMessageId.put(chatId, bot.sendMessageWithKeyboard(chatId, message, createBackKeyboard()));

                } else {
                    // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: "5000"
                    double min = Double.parseDouble(rangeStr);
                    commissionConfig.updateCommissionRange(min, percent);

                    String message = String.format("‚úÖ –ö–æ–º–∏—Å—Å–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞!\n\n–û—Ç %.0f ‚ÇΩ\n–ö–æ–º–∏—Å—Å–∏—è: %.1f%%",
                            min, percent);
                    lastMessageId.put(chatId, bot.sendMessageWithKeyboard(chatId, message, createBackKeyboard()));
                }
                return;
            }
        } catch (Exception e) {
            // –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å
        }

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        String message = "üí∞ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–∏—Å—Å–∏—è–º–∏\n\n" +
                "–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:\n" +
                "‚Ä¢ 1000-1999 ‚ÇΩ: " + commissionConfig.getCommissionPercent(1000) + "%\n" +
                "‚Ä¢ 2000-2999 ‚ÇΩ: " + commissionConfig.getCommissionPercent(2000) + "%\n" +
                "‚Ä¢ 3000-4999 ‚ÇΩ: " + commissionConfig.getCommissionPercent(3000) + "%\n" +
                "‚Ä¢ 5000+ ‚ÇΩ: " + commissionConfig.getCommissionPercent(5000) + "%\n\n" +
                "–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤–≤–µ–¥–∏—Ç–µ:\n" +
                "‚Ä¢ –î–ª—è –¥–∏–∞–ø–∞–∑–æ–Ω–∞: 1000-1999 5\n" +
                "‚Ä¢ –î–ª—è –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Å—É–º–º—ã: 5000 2\n\n" +
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ 'üîô –ù–∞–∑–∞–¥' –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞";

        ReplyKeyboardMarkup keyboard = createBackKeyboard();
        lastMessageId.put(chatId, bot.sendMessageWithKeyboard(chatId, message, keyboard));
    }


    private void processStartCommand(Update update, MyBot bot) {
        Long chatId = update.getMessage().getChatId();
        org.telegram.telegrambots.meta.api.objects.User telegramUser = update.getMessage().getFrom();

        User user = userService.findOrCreateUser(telegramUser);
        user.setState(UserState.CAPTCHA_CHECK);
        userService.update(user);

        showCaptcha(chatId, user, bot);
    }

    private void showCaptcha(Long chatId, User user, MyBot bot) {
        CaptchaService.CaptchaChallenge challenge = captchaService.generateCaptcha(user.getId());

        InlineKeyboardMarkup keyboard = createCaptchaKeyboard(challenge.getOptions());
        String message = "üîê –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –ø—Ä–æ–π–¥–∏—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫—É:\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–º–∞–π–ª–∏–∫: \"" + challenge.getCorrectEmoji() + "\"";

        lastMessageId.put(chatId, bot.sendMessageWithKeyboard(chatId, message, keyboard));
    }

    private void processCallback(Update update, MyBot bot) {
        String callbackData = update.getCallbackQuery().getData();
        Long chatId = update.getCallbackQuery().getMessage().getChatId();
        Long telegramId = update.getCallbackQuery().getFrom().getId();

        User user = userService.findByTelegramId(telegramId);
        if (user == null) {
            lastMessageId.put(chatId, bot.sendMessageWithKeyboard(chatId, "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", createMainMenuKeyboard(user)));
            return;
        }

        if (callbackData.startsWith("captcha_")) {
            processCaptchaSelection(chatId, user, callbackData, bot);
        }
    }

    private void processCaptchaSelection(Long chatId, User user, String callbackData, MyBot bot) {
        String selectedEmoji = callbackData.replace("captcha_", "");

        if (captchaService.verifyCaptcha(user.getId(), selectedEmoji)) {
            user.setState(UserState.MAIN_MENU);
            userService.update(user);
            showMainMenu(chatId, user, bot);
        } else {
            showCaptcha(chatId, user, bot);
        }
    }

    private void showMainMenu(Long chatId, User user, MyBot bot) {
        String message = "üíé –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:";
        lastMessageId.put(chatId, bot.sendMessageWithKeyboard(chatId, message, createMainMenuKeyboard(user)));
    }

    private void processMainMenuCommand(Long chatId, User user, String text, MyBot bot) {
        switch (text) {
            case "üí∞ –ö—É–ø–∏—Ç—å":
                user.setState(UserState.BUY_MENU);
                userService.update(user);
                showBuyMenu(chatId, bot);
                break;
            case "üí∏ –ü—Ä–æ–¥–∞—Ç—å":
                user.setState(UserState.SELL_MENU);
                userService.update(user);
                showSellMenu(chatId, bot);
                break;
            case "üé´ –í–≤–µ—Å—Ç–∏ —Ä–µ—Ñ. –∫–æ–¥":
                if (user.getUsedReferralCode() != null) {
                    lastMessageId.put(chatId, bot.sendMessageWithKeyboard(chatId,
                            "‚ùå –í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥.", createMainMenuKeyboard(user)));
                    return;
                }
                user.setState(UserState.ENTERING_REFERRAL_CODE);
                userService.update(user);
                lastMessageId.put(chatId, bot.sendMessageWithKeyboard(chatId,
                        "–í–≤–µ–¥–∏—Ç–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥:", createBackKeyboard()));
                break;
            case "üë®‚Äçüíº –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å":
                if (adminConfig.isAdmin(user.getId())) {
                    user.setState(UserState.ADMIN_MAIN_MENU);
                    userService.update(user);
                    showAdminMainMenu(chatId, bot);
                } else {
                    lastMessageId.put(chatId, bot.sendMessageWithKeyboard(chatId, "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", createMainMenuKeyboard(user)));
                }
                break;
            case "‚öôÔ∏è –ü—Ä–æ—á–µ–µ":
                user.setState(UserState.OTHER_MENU);
                userService.update(user);
                showOtherMenu(chatId, user, bot);
                break;
            default:
                lastMessageId.put(chatId, bot.sendMessageWithKeyboard(chatId, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é", createMainMenuKeyboard(user)));
        }
    }
    private void showAdminMainMenu(Long chatId, MyBot bot) {
        String message = "üë®‚Äçüíº –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:";
        ReplyKeyboardMarkup keyboard = createAdminMainMenuKeyboard();
        lastMessageId.put(chatId, bot.sendMessageWithKeyboard(chatId, message, keyboard));
    }

    private void showBuyMenu(Long chatId, MyBot bot) {
        String message = "üí∞ –ü–æ–∫—É–ø–∫–∞ Bitcoin\n\n" +
                "–í—ã —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å Bitcoin –∑–∞ —Ä—É–±–ª–∏.\n\n" +
                "–ü–æ—Å–ª–µ –≤–≤–æ–¥–∞ —Å—É–º–º—ã –≤—ã —É–≤–∏–¥–∏—Ç–µ:\n" +
                "‚Ä¢ –°–∫–æ–ª—å–∫–æ —Ä—É–±–ª–µ–π –≤—ã –æ—Ç–¥–∞–¥–∏—Ç–µ\n" +
                "‚Ä¢ –°–∫–æ–ª—å–∫–æ Bitcoin –ø–æ–ª—É—á–∏—Ç–µ";

        ReplyKeyboardMarkup keyboard = createBuyMenuKeyboard();
        lastMessageId.put(chatId, bot.sendMessageWithKeyboard(chatId, message, keyboard));
    }

    private void showSellMenu(Long chatId, MyBot bot) {
        String message = "üí∏ –ü—Ä–æ–¥–∞–∂–∞ Bitcoin\n\n" +
                "–í—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–∞—Ç—å Bitcoin –∑–∞ —Ä—É–±–ª–∏.\n\n" +
                "–ü–æ—Å–ª–µ –≤–≤–æ–¥–∞ —Å—É–º–º—ã –≤—ã —É–≤–∏–¥–∏—Ç–µ:\n" +
                "‚Ä¢ –°–∫–æ–ª—å–∫–æ Bitcoin –≤—ã –æ—Ç–¥–∞–¥–∏—Ç–µ\n" +
                "‚Ä¢ –°–∫–æ–ª—å–∫–æ —Ä—É–±–ª–µ–π –ø–æ–ª—É—á–∏—Ç–µ";

        ReplyKeyboardMarkup keyboard = createSellMenuKeyboard();
        lastMessageId.put(chatId, bot.sendMessageWithKeyboard(chatId, message, keyboard));
    }

    private void processBuyMenu(Long chatId, User user, String text, MyBot bot) {
        if ("–í–≤–µ—Å—Ç–∏ —Å—É–º–º—É –≤ RUB".equals(text)) {
            user.setState(UserState.ENTERING_BUY_AMOUNT_RUB);
            userService.update(user);
            currentOperation.put(user.getId(), "BUY_RUB");

            String message = "üíé –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤ —Ä—É–±–ª—è—Ö, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –ø–æ—Ç—Ä–∞—Ç–∏—Ç—å –Ω–∞ –ø–æ–∫—É–ø–∫—É Bitcoin:";
            ReplyKeyboardMarkup keyboard = createAmountInputKeyboard();
            lastMessageId.put(chatId, bot.sendMessageWithKeyboard(chatId, message, keyboard));
        } else if ("–í–≤–µ—Å—Ç–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ BTC".equals(text)) {
            user.setState(UserState.ENTERING_BUY_AMOUNT_BTC);
            userService.update(user);
            currentOperation.put(user.getId(), "BUY_BTC");

            String message = "üíé –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ Bitcoin, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å:";
            ReplyKeyboardMarkup keyboard = createAmountInputKeyboard();
            lastMessageId.put(chatId, bot.sendMessageWithKeyboard(chatId, message, keyboard));
        } else if ("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é".equals(text)) {
            processMainMenu(chatId, user, bot);
        } else {
            lastMessageId.put(chatId, bot.sendMessageWithKeyboard(chatId, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏", createBuyMenuKeyboard()));
        }
    }

    private void processSellMenu(Long chatId, User user, String text, MyBot bot) {
        if ("–í–≤–µ—Å—Ç–∏ —Å—É–º–º—É".equals(text)) {
            user.setState(UserState.ENTERING_SELL_AMOUNT);
            userService.update(user);
            currentOperation.put(user.getId(), "SELL");

            String message = "üíé –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ Bitcoin, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–∞—Ç—å:";
            ReplyKeyboardMarkup keyboard = createAmountInputKeyboard();
            lastMessageId.put(chatId, bot.sendMessageWithKeyboard(chatId, message, keyboard));
        } else if ("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é".equals(text)) {
            processMainMenu(chatId, user, bot);
        } else {
            lastMessageId.put(chatId, bot.sendMessageWithKeyboard(chatId, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏", createSellMenuKeyboard()));
        }
    }

    private void showBonusBalance(Long chatId, User user, MyBot bot) {
        String message = String.format("""
        üí∞ –ë–æ–Ω—É—Å–Ω—ã–π –±–∞–ª–∞–Ω—Å
            
        üéÅ –î–æ—Å—Ç—É–ø–Ω–æ –±–æ–Ω—É—Å–æ–≤: %.2f ‚ÇΩ
            
        üí° –ë–æ–Ω—É—Å—ã –Ω–∞—á–∏—Å–ª—è—é—Ç—Å—è –∑–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏:
        ‚Ä¢ 1%% –æ—Ç —Å—É–º–º—ã –ø–æ–∫—É–ø–∫–∏
        ‚Ä¢ 0.5%% –æ—Ç —Å—É–º–º—ã –ø—Ä–æ–¥–∞–∂–∏
        ‚Ä¢ –ë–æ–Ω—É—Å—ã –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è –æ–ø–ª–∞—Ç—ã –∫–æ–º–∏—Å—Å–∏–π
        """, user.getBonusBalance());

        lastMessageId.put(chatId, bot.sendMessageWithKeyboard(chatId, message, createOtherMenuKeyboard()));
    }


    private void processEnteringSellAmount(Long chatId, User user, String text, MyBot bot) {
        switch (text) {
            case "–ù–∞–∑–∞–¥":
                user.setState(UserState.SELL_MENU);
                userService.update(user);
                showSellMenu(chatId, bot);
                break;
            case "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
                processMainMenu(chatId, user, bot);
                break;
            default:
                try {
                    double btcAmount = Double.parseDouble(text);
                    if (btcAmount <= 0) {
                        lastMessageId.put(chatId, bot.sendMessageWithKeyboard(chatId,
                                "‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0", createAmountInputKeyboard()));
                        return;
                    }

                    // –†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –≤ RUB
                    double btcPrice = cryptoPriceService.getCurrentPrice("BTC", "RUB");
                    double rubAmount = btcAmount * btcPrice;

                    Application application = new Application();
                    application.setUser(user);
                    application.setUserValueGetType(ValueType.RUB);
                    application.setUserValueGiveType(ValueType.BTC);
                    application.setUserValueGetValue(rubAmount);
                    application.setUserValueGiveValue(btcAmount);
                    application.setCalculatedGetValue(rubAmount);
                    application.setCalculatedGiveValue(btcAmount);
                    application.setTitle("–ü—Ä–æ–¥–∞–∂–∞ BTC –∑–∞ RUB");
                    application.setStatus(ApplicationStatus.FREE); // –î–û–ë–ê–í–õ–ï–ù–û

                    temporaryApplications.put(user.getId(), application);

                    String calculationMessage = String.format("""
                    üí∞ –†–∞—Å—á–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏:
                    
                    ‚Çø –í—ã –æ—Ç–¥–∞–¥–∏—Ç–µ: %.8f BTC
                    üí∏ –í—ã –ø–æ–ª—É—á–∏—Ç–µ: %.2f ‚ÇΩ
                    
                    –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏?
                    """, btcAmount, rubAmount);

                    ReplyKeyboardMarkup keyboard = createConfirmationKeyboard();
                    lastMessageId.put(chatId, bot.sendMessageWithKeyboard(chatId, calculationMessage, keyboard));

                    user.setState(UserState.CONFIRMING_APPLICATION);
                    userService.update(user);

                } catch (NumberFormatException e) {
                    lastMessageId.put(chatId, bot.sendMessageWithKeyboard(chatId,
                            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ", createAmountInputKeyboard()));
                }
        }
    }
    private void showExchangeRates(Long chatId, User user, MyBot bot) {
        double btcPrice = cryptoPriceService.getCurrentPrice("BTC", "RUB");
        double ethPrice = cryptoPriceService.getCurrentPrice("ETH", "RUB");

        String message = String.format("""
            üìä –¢–µ–∫—É—â–∏–µ –∫—É—Ä—Å—ã:
            
            ‚Çø Bitcoin (BTC): %.2f ‚ÇΩ
            Œû Ethereum (ETH): %.2f ‚ÇΩ
            
            *–ö—É—Ä—Å—ã –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
            """, btcPrice, ethPrice);

        lastMessageId.put(chatId, bot.sendMessageWithKeyboard(chatId, message, createOtherMenuKeyboard()));
    }
    private void showProfile(Long chatId, User user, MyBot bot) {
        String message = String.format("""
            üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:
            
            üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞—è–≤–æ–∫:
            ‚úÖ –£—Å–ø–µ—à–Ω–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–æ: %d
            üí∞ –ö—É–ø–ª–µ–Ω–æ: %.2f ‚ÇΩ
            üí∏ –ü—Ä–æ–¥–∞–Ω–æ: %.2f ‚ÇΩ
            üìà –í—Å–µ–≥–æ –∑–∞—è–≤–æ–∫: %d
            üí∏ –ö–æ–º–∏—Å—Å–∏–π —É–ø–ª–∞—á–µ–Ω–æ: %.2f ‚ÇΩ
            
            üìà –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞:
            üë• –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ: %d
            üí∞ –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: %.2f ‚ÇΩ
            """,
                user.getCompletedBuyApplications() + user.getCompletedSellApplications(),
                user.getTotalBuyAmount(),
                user.getTotalSellAmount(),
                user.getTotalApplications(),
                user.getTotalCommissionPaid(),
                user.getReferralCount(),
                user.getReferralEarnings()
        );

        lastMessageId.put(chatId, bot.sendMessageWithKeyboard(chatId, message, createOtherMenuKeyboard()));
    }

    private void processApplyingCoupon(Long chatId, User user, String text, MyBot bot) {
        Application application = temporaryApplications.get(user.getId());

        if (application == null) {
            processMainMenu(chatId, user, bot);
            return;
        }

        switch (text) {
            case "–ü—Ä–∏–º–µ–Ω–∏—Ç—å –∫—É–ø–æ–Ω":
                lastMessageId.put(chatId, bot.sendMessageWithKeyboard(chatId,
                        "üé´ –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∫—É–ø–æ–Ω–∞:", createBackKeyboard()));
                break;
            case "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
                createApplicationWithoutCoupon(chatId, user, application, bot);
                break;
            case "–ù–∞–∑–∞–¥":
                // –ò–°–ü–†–ê–í–ò–¢–¨ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏
                if ("BUY_RUB".equals(currentOperation.get(user.getId())) ||
                        "BUY_BTC".equals(currentOperation.get(user.getId()))) {
                    user.setState(UserState.BUY_MENU);
                } else {
                    user.setState(UserState.SELL_MENU);
                }
                userService.update(user);
                lastMessageId.put(chatId, bot.sendMessageWithKeyboard(chatId,
                        "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É:", createAmountInputKeyboard()));
                break;
            case "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
                processMainMenu(chatId, user, bot);
                break;
            default:
                processCouponCode(chatId, user, application, text, bot);
        }
    }

    private void processCouponCode(Long chatId, User user, Application application, String couponCode, MyBot bot) {
        try {
            Coupon coupon = couponService.findValidCoupon(couponCode, user)
                    .orElseThrow(() -> new IllegalArgumentException("–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π –∫—É–ø–æ–Ω"));

            // –ü—Ä–∏–º–µ–Ω—è–µ–º –∫—É–ø–æ–Ω –∫ –∑–∞—è–≤–∫–µ
            double originalAmount = application.getCalculatedGiveValue();
            double discountedAmount = couponService.applyCoupon(originalAmount, coupon);

            application.setAppliedCoupon(coupon);
            application.setFinalAmountAfterDiscount(discountedAmount);
            application.setStatus(ApplicationStatus.FREE); // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞—è–≤–∫—É
            applicationService.create(application);
            temporaryApplications.remove(user.getId());

            String message = String.format("""
            ‚úÖ –ö—É–ø–æ–Ω –ø—Ä–∏–º–µ–Ω–µ–Ω!
            
            üé´ –ö—É–ø–æ–Ω: %s
            üí∞ –°–∫–∏–¥–∫–∞: %s
            üí∏ –ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞: %.2f ‚ÇΩ
            
            –ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ —Å –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ–º –∫—É–ø–æ–Ω–∞!
            """,
                    coupon.getCode(),
                    coupon.getDiscountPercent() != null ?
                            coupon.getDiscountPercent() + "%" :
                            coupon.getDiscountAmount() + " ‚ÇΩ",
                    discountedAmount);

            lastMessageId.put(chatId, bot.sendMessageWithKeyboard(chatId, message, createMainMenuKeyboard(user)));

            user.setState(UserState.MAIN_MENU);
            userService.update(user);

        } catch (IllegalArgumentException e) {
            lastMessageId.put(chatId, bot.sendMessageWithKeyboard(chatId,
                    "‚ùå " + e.getMessage() + "\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∫–æ–¥ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'",
                    createCouponApplicationKeyboard()));
        }
    }

    private void createApplicationWithoutCoupon(Long chatId, User user, Application application, MyBot bot) {
        application.setStatus(ApplicationStatus.FREE); // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º
        applicationService.create(application);
        temporaryApplications.remove(user.getId());

        String message = "‚úÖ –ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!\n\n";
        if (application.getUserValueGetType() == ValueType.BTC) {
            message += String.format("üí∏ –í—ã –æ—Ç–¥–∞–¥–∏—Ç–µ: %.2f ‚ÇΩ\n‚Çø –í—ã –ø–æ–ª—É—á–∏—Ç–µ: %.8f BTC",
                    application.getCalculatedGiveValue(), application.getCalculatedGetValue());
        } else {
            message += String.format("‚Çø –í—ã –æ—Ç–¥–∞–¥–∏—Ç–µ: %.8f BTC\nüí∏ –í—ã –ø–æ–ª—É—á–∏—Ç–µ: %.2f ‚ÇΩ",
                    application.getCalculatedGiveValue(), application.getCalculatedGetValue());
        }

        lastMessageId.put(chatId, bot.sendMessageWithKeyboard(chatId, message, createMainMenuKeyboard(user)));

        user.setState(UserState.MAIN_MENU);
        userService.update(user);
    }
    private void showOtherMenu(Long chatId, User user, MyBot bot) {
        String message = "‚öôÔ∏è –ü—Ä–æ—á–µ–µ\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:";
        ReplyKeyboardMarkup keyboard = createOtherMenuKeyboard();
        lastMessageId.put(chatId, bot.sendMessageWithKeyboard(chatId, message, keyboard));
    }
    private void processViewingCoupons(Long chatId, User user, MyBot bot) {
        List<Coupon> userCoupons = couponService.getUserCoupons(user.getId());

        if (userCoupons.isEmpty()) {
            String message = "üé´ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫—É–ø–æ–Ω–æ–≤.";
            lastMessageId.put(chatId, bot.sendMessageWithKeyboard(chatId, message, createMainMenuKeyboard(user)));
        } else {
            StringBuilder response = new StringBuilder("üé´ –í–∞—à–∏ –∫—É–ø–æ–Ω—ã:\n\n");

            for (int i = 0; i < userCoupons.size(); i++) {
                Coupon coupon = userCoupons.get(i);
                response.append(String.format("""
                üî¢ –ù–æ–º–µ—Ä: %d
                üé´ –ö–æ–¥: %s
                üí∞ –°–∫–∏–¥–∫–∞: %s
                üìù –û–ø–∏—Å–∞–Ω–∏–µ: %s
                """,
                        i + 1,
                        coupon.getCode(),
                        coupon.getDiscountPercent() != null ?
                                coupon.getDiscountPercent() + "%" :
                                coupon.getDiscountAmount() + " ‚ÇΩ",
                        coupon.getDescription() != null ? coupon.getDescription() : "–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è"
                ));

                if (coupon.getValidUntil() != null) {
                    response.append(String.format("üìÖ –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: %s\n", coupon.getValidUntil().toLocalDate()));
                }

                response.append("--------------------\n");
            }

            response.append("\n–ß—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫—É–ø–æ–Ω, –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ –Ω–æ–º–µ—Ä –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏.");
            lastMessageId.put(chatId, bot.sendMessageWithKeyboard(chatId, response.toString(), createMainMenuKeyboard(user)));
        }

        user.setState(UserState.MAIN_MENU);
        userService.update(user);
    }

    private void processViewingApplications(Long chatId, User user, MyBot bot) {
        List<Application> applications = applicationService.findByUser(user.getId());

        if (applications.isEmpty()) {
            String message = "üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞—è–≤–æ–∫.\n–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—É—é —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏ 'üí∞ –ö—É–ø–∏—Ç—å' –∏–ª–∏ 'üí∏ –ü—Ä–æ–¥–∞—Ç—å'";
            lastMessageId.put(chatId, bot.sendMessageWithKeyboard(chatId, message, createMainMenuKeyboard(user)));
        } else {
            StringBuilder response = new StringBuilder("üìã –í–∞—à–∏ –∑–∞—è–≤–∫–∏:\n\n");

            for (int i = 0; i < applications.size(); i++) {
                Application app = applications.get(i);
                response.append(String.format("""
                üÜî –ó–∞—è–≤–∫–∞ #%d
                üìä –°—Ç–∞—Ç—É—Å: %s
                üí∞ –ü–æ–ª—É—á–∞—é: %.8f %s
                üí∏ –û—Ç–¥–∞—é: %.2f %s
                üìÖ –°–æ–∑–¥–∞–Ω–∞: %s
                """,
                        app.getId(),
                        app.getStatus().getDisplayName(), // –î–û–ë–ê–í–õ–ï–ù–û
                        app.getUserValueGetValue(),
                        app.getUserValueGetType().getDisplayName(),
                        app.getUserValueGiveValue(),
                        app.getUserValueGiveType().getDisplayName(),
                        app.getCreatedAt().toLocalDate()
                ));

                if (app.getAppliedCoupon() != null) {
                    response.append(String.format("üé´ –ö—É–ø–æ–Ω: %s\n", app.getAppliedCoupon().getCode()));
                }

                response.append("--------------------\n");
            }

            lastMessageId.put(chatId, bot.sendMessageWithKeyboard(chatId, response.toString(), createMainMenuKeyboard(user)));
        }

        user.setState(UserState.MAIN_MENU);
        userService.update(user);
    }
    private void processEnteringBuyAmountRub(Long chatId, User user, String text, MyBot bot) {
        switch (text) {
            case "–ù–∞–∑–∞–¥":
                user.setState(UserState.BUY_MENU);
                userService.update(user);
                showBuyMenu(chatId, bot);
                break;
            case "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
                processMainMenu(chatId, user, bot);
                break;
            default:
                try {
                    double rubAmount = Double.parseDouble(text);

                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Å—É–º–º—É
                    if (rubAmount < 1000) {
                        lastMessageId.put(chatId, bot.sendMessageWithKeyboard(chatId,
                                "‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –∑–∞—è–≤–∫–∏ 1000 —Ä—É–±–ª–µ–π", createAmountInputKeyboard()));
                        return;
                    }

                    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–º–∏—Å—Å–∏—é
                    double commission = commissionService.calculateCommission(rubAmount);
                    double totalAmount = commissionService.calculateTotalWithCommission(rubAmount);

                    // –†–∞—Å—á–µ—Ç –ø–æ–ª—É—á–µ–Ω–∏—è BTC (–ø–æ —Å—É–º–º–µ –±–µ–∑ –∫–æ–º–∏—Å—Å–∏–∏)
                    double btcPrice = cryptoPriceService.getCurrentPrice("BTC", "RUB");
                    double btcAmount = rubAmount / btcPrice;

                    // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –∑–∞—è–≤–∫—É
                    Application application = new Application();
                    application.setUser(user);
                    application.setUserValueGetType(ValueType.BTC);
                    application.setUserValueGiveType(ValueType.RUB);
                    application.setUserValueGetValue(btcAmount);
                    application.setUserValueGiveValue(totalAmount); // –°—É–º–º–∞ —Å –∫–æ–º–∏—Å—Å–∏–µ–π
                    application.setCalculatedGetValue(btcAmount);
                    application.setCalculatedGiveValue(totalAmount);
                    application.setTitle("–ü–æ–∫—É–ø–∫–∞ BTC –∑–∞ RUB");

                    temporaryApplications.put(user.getId(), application);

                    String calculationMessage = String.format("""
                        üí∞ –†–∞—Å—á–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏:
                        
                        üí∏ –í—ã –æ—Ç–¥–∞–¥–∏—Ç–µ: %.2f ‚ÇΩ
                        ‚Çø –í—ã –ø–æ–ª—É—á–∏—Ç–µ: %.8f BTC
                        
                        –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏?
                        """, totalAmount, btcAmount);

                    ReplyKeyboardMarkup keyboard = createConfirmationKeyboard();
                    lastMessageId.put(chatId, bot.sendMessageWithKeyboard(chatId, calculationMessage, keyboard));

                    user.setState(UserState.CONFIRMING_APPLICATION);
                    userService.update(user);

                } catch (NumberFormatException e) {
                    lastMessageId.put(chatId, bot.sendMessageWithKeyboard(chatId,
                            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ", createAmountInputKeyboard()));
                } catch (IllegalArgumentException e) {
                    lastMessageId.put(chatId, bot.sendMessageWithKeyboard(chatId,
                            "‚ùå " + e.getMessage(), createAmountInputKeyboard()));
                }
        }
    }

    private void processEnteringBuyAmountBtc(Long chatId, User user, String text, MyBot bot) {
        switch (text) {
            case "–ù–∞–∑–∞–¥":
                user.setState(UserState.BUY_MENU);
                userService.update(user);
                showBuyMenu(chatId, bot);
                break;
            case "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
                processMainMenu(chatId, user, bot);
                break;
            default:
                try {
                    double btcAmount = Double.parseDouble(text);
                    if (btcAmount <= 0) {
                        lastMessageId.put(chatId, bot.sendMessageWithKeyboard(chatId, "‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0", createAmountInputKeyboard()));
                        return;
                    }

                    // –†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –≤ RUB
                    double btcPrice = cryptoPriceService.getCurrentPrice("BTC", "RUB");
                    double rubAmount = btcAmount * btcPrice;

                    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é —Å –∫–æ–º–∏—Å—Å–∏–µ–π
                    processBuyConfirmation(chatId, user, rubAmount, btcAmount, "BTC", "RUB", bot);

                } catch (NumberFormatException e) {
                    lastMessageId.put(chatId, bot.sendMessageWithKeyboard(chatId, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ", createAmountInputKeyboard()));
                }
        }
    }

    private void processBuyConfirmation(Long chatId, User user, double rubAmount, double btcAmount,
                                        String inputType, String outputType, MyBot bot) {

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Å—É–º–º—ã
        if (rubAmount < 1000) {
            lastMessageId.put(chatId, bot.sendMessageWithKeyboard(chatId,
                    "‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –∑–∞—è–≤–∫–∏ 1000 —Ä—É–±–ª–µ–π", createAmountInputKeyboard()));
            return;
        }

        // –†–∞—Å—á–µ—Ç –∫–æ–º–∏—Å—Å–∏–∏
        double commission = commissionService.calculateCommission(rubAmount);
        double totalAmount = commissionService.calculateTotalWithCommission(rubAmount);

        // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –∑–∞—è–≤–∫—É
        Application application = new Application();
        application.setUser(user);
        application.setUserValueGetType(ValueType.BTC);
        application.setUserValueGiveType(ValueType.RUB);
        application.setUserValueGetValue(btcAmount);
        application.setUserValueGiveValue(totalAmount);
        application.setCalculatedGetValue(btcAmount);
        application.setCalculatedGiveValue(totalAmount);
        application.setTitle("–ü–æ–∫—É–ø–∫–∞ BTC –∑–∞ RUB");
        application.setStatus(ApplicationStatus.FREE);

        temporaryApplications.put(user.getId(), application);

        String calculationMessage = String.format("""
        üí∞ –†–∞—Å—á–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏:
        
        üí∏ –°—É–º–º–∞: %.2f ‚ÇΩ
        üí∞ –ö–æ–º–∏—Å—Å–∏—è: %.2f ‚ÇΩ (%.1f%%)
        üí∏ –ò—Ç–æ–≥–æ –∫ –æ–ø–ª–∞—Ç–µ: %.2f ‚ÇΩ
        ‚Çø –í—ã –ø–æ–ª—É—á–∏—Ç–µ: %.8f BTC
        
        –•–æ—Ç–∏—Ç–µ –ø—Ä–∏–º–µ–Ω–∏—Ç—å –∫—É–ø–æ–Ω –¥–ª—è —Å–∫–∏–¥–∫–∏?
        """, rubAmount, commission, commissionService.getCommissionPercent(rubAmount),
                totalAmount, btcAmount);

        ReplyKeyboardMarkup keyboard = createCouponApplicationKeyboard();
        lastMessageId.put(chatId, bot.sendMessageWithKeyboard(chatId, calculationMessage, keyboard));

        user.setState(UserState.APPLYING_COUPON);
        userService.update(user);
    }
    private void processConfirmingApplication(Long chatId, User user, String text, MyBot bot) {
        Application application = temporaryApplications.get(user.getId());

        if (application == null) {
            processMainMenu(chatId, user, bot);
            return;
        }

        switch (text) {
            case "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å":
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞—è–≤–∫—É
                applicationService.create(application);
                temporaryApplications.remove(user.getId());

                String message = String.format("""
                ‚úÖ –ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!
                
                üÜî –ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏: %d
                üí∞ –°—É–º–º–∞: %.2f ‚ÇΩ
                ‚Çø Bitcoin: %.8f BTC
                üìÖ –í—Ä–µ–º—è: %s
                """,
                        application.getId(),
                        application.getCalculatedGiveValue(),
                        application.getCalculatedGetValue(),
                        application.getCreatedAt().toString()
                );

                lastMessageId.put(chatId, bot.sendMessageWithKeyboard(chatId, message, createMainMenuKeyboard(user)));

                user.setState(UserState.MAIN_MENU);
                userService.update(user);
                break;
            case "–û—Ç–º–µ–Ω–∞":
                temporaryApplications.remove(user.getId());
                processMainMenu(chatId, user, bot);
                break;
            default:
                lastMessageId.put(chatId, bot.sendMessageWithKeyboard(chatId, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏", createConfirmationKeyboard()));
        }
    }

    private void processViewingQueue(Long chatId, User user, MyBot bot) {
        List<Application> activeApplications = applicationService.findActiveApplications(); // –ò–ó–ú–ï–ù–ò–¢–¨
        int totalApplications = activeApplications.size();
        int activeUsers = userService.getActiveUsersCount();

        String message = String.format("""
        üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã:
        
        üìà –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫: %d
        üë• –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: %d
        
        üí° –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ
        """, totalApplications, activeUsers);

        lastMessageId.put(chatId, bot.sendMessageWithKeyboard(chatId, message, createMainMenuKeyboard(user)));

        user.setState(UserState.MAIN_MENU);
        userService.update(user);
    }

    private void processMainMenu(Long chatId, User user, MyBot bot) {
        user.setState(UserState.MAIN_MENU);
        userService.update(user);
        showMainMenu(chatId, user, bot);
    }
    private void processAdminMainMenu(Long chatId, User user, String text, MyBot bot) {
        switch (text) {
            case "üìã –í—Å–µ –∑–∞—è–≤–∫–∏":
                user.setState(UserState.ADMIN_VIEWING_ALL_APPLICATIONS);
                userService.update(user);
                processAdminViewingAllApplications(chatId, user, bot);
                break;
            case "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
                showAdminStatistics(chatId, user, bot);
                break;
            case "üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏":
                showAdminUsers(chatId, user, bot);
                break;
            case "üí∞ –ö–æ–º–∏—Å—Å–∏–∏":
                user.setState(UserState.ADMIN_COMMISSION_SETTINGS);
                userService.update(user);
                processAdminCommissionSettings(chatId, user, text, bot);
                break;
            case "üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
                processMainMenu(chatId, user, bot);
                break;
            default:
                lastMessageId.put(chatId, bot.sendMessageWithKeyboard(chatId,
                        "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏", createAdminMainMenuKeyboard()));
        }
    }
    private void showAdminStatistics(Long chatId, User user, MyBot bot) {
        List<Application> allApplications = applicationService.findAll();
        Map<ApplicationStatus, Long> statusCount = allApplications.stream()
                .collect(Collectors.groupingBy(Application::getStatus, Collectors.counting()));

        int totalUsers = userService.getActiveUsersCount();
        int totalApplications = allApplications.size();

        String message = String.format("""
            üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã:
            
            üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: %d
            üìã –í—Å–µ–≥–æ –∑–∞—è–≤–æ–∫: %d
            
            üìà –°—Ç–∞—Ç—É—Å—ã –∑–∞—è–≤–æ–∫:
            üü¢ –°–≤–æ–±–æ–¥–Ω—ã: %d
            üü° –í —Ä–∞–±–æ—Ç–µ: %d
            üîµ –ó–∞–∫—Ä—ã—Ç—ã: %d
            üî¥ –û—Ç–º–µ–Ω–µ–Ω—ã: %d
            """,
                totalUsers,
                totalApplications,
                statusCount.getOrDefault(ApplicationStatus.FREE, 0L),
                statusCount.getOrDefault(ApplicationStatus.IN_WORK, 0L),
                statusCount.getOrDefault(ApplicationStatus.CLOSED, 0L),
                statusCount.getOrDefault(ApplicationStatus.CANCELLED, 0L)
        );

        lastMessageId.put(chatId, bot.sendMessageWithKeyboard(chatId, message, createAdminMainMenuKeyboard()));
    }

    private void showAdminUsers(Long chatId, User user, MyBot bot) {
        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        String message = "üë• –†–∞–∑–¥–µ–ª —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ";
        lastMessageId.put(chatId, bot.sendMessageWithKeyboard(chatId, message, createAdminMainMenuKeyboard()));
    }

    private void showAdminCoupons(Long chatId, User user, MyBot bot) {
        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫—É–ø–æ–Ω–∞–º–∏
        String message = "üé´ –†–∞–∑–¥–µ–ª —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫—É–ø–æ–Ω–∞–º–∏ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ";
        lastMessageId.put(chatId, bot.sendMessageWithKeyboard(chatId, message, createAdminMainMenuKeyboard()));
    }

    private void processAdminViewingAllApplications(Long chatId, User user, MyBot bot) {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞—è–≤–∫–∏ (FREE –∏ IN_WORK)
        List<Application> activeApplications = applicationService.findActiveApplications();

        if (activeApplications.isEmpty()) {
            String message = "üì≠ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫.";
            lastMessageId.put(chatId, bot.sendMessageWithKeyboard(chatId, message, createAdminMainMenuKeyboard()));
        } else {
            StringBuilder response = new StringBuilder("üìã –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞—è–≤–∫–∏:\n\n");

            for (Application app : activeApplications) {
                response.append(String.format("""
                üÜî –ó–∞—è–≤–∫–∞ #%d
                üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: %s (@%s)
                üí∞ –¢–∏–ø: %s
                üìä –°—Ç–∞—Ç—É—Å: %s
                üí∏ –°—É–º–º–∞: %.2f ‚ÇΩ
                ‚Çø Bitcoin: %.8f BTC
                üìÖ –°–æ–∑–¥–∞–Ω–∞: %s
                """,
                        app.getId(),
                        app.getUser().getFirstName(),
                        app.getUser().getUsername() != null ? app.getUser().getUsername() : "–Ω–µ—Ç username",
                        app.getTitle(),
                        app.getStatus().getDisplayName(),
                        app.getCalculatedGiveValue(),
                        app.getCalculatedGetValue(),
                        app.getCreatedAt().format(DateTimeFormatter.ofPattern("dd.MM.yyyy HH:mm"))
                ));

                response.append("--------------------\n");
            }

            response.append("\n–î–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–æ–π –≤–≤–µ–¥–∏—Ç–µ –µ—ë –Ω–æ–º–µ—Ä:");

            lastMessageId.put(chatId, bot.sendMessageWithKeyboard(chatId, response.toString(), createBackKeyboard()));
        }
    }


    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∑–∞—è–≤–∫–∏ –∞–¥–º–∏–Ω–æ–º
    private void processAdminApplicationSelection(Long chatId, User user, String text, MyBot bot) {
        try {
            Long applicationId = Long.parseLong(text);
            Application application = applicationService.find(applicationId);

            if (application == null) {
                lastMessageId.put(chatId, bot.sendMessageWithKeyboard(chatId, "‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", createAdminMainMenuKeyboard()));
                return;
            }

            selectedApplication.put(user.getId(), applicationId);
            user.setState(UserState.ADMIN_VIEWING_APPLICATION_DETAILS);
            userService.update(user);

            showAdminApplicationDetails(chatId, user, application, bot);

        } catch (NumberFormatException e) {
            lastMessageId.put(chatId, bot.sendMessageWithKeyboard(chatId, "‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞—è–≤–∫–∏", createBackKeyboard()));
        }
    }

    // –î–µ—Ç–∞–ª–∏ –∑–∞—è–≤–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–∞
    private void showAdminApplicationDetails(Long chatId, User user, Application application, MyBot bot) {
        String message = String.format("""
            üìã –î–µ—Ç–∞–ª–∏ –∑–∞—è–≤–∫–∏ #%d
            
            üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: %s %s (@%s)
            üìû Telegram ID: %d
            üí∞ –¢–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏: %s
            üìä –°—Ç–∞—Ç—É—Å: %s
            
            üí∏ –û—Ç–¥–∞–µ—Ç: %.2f %s
            üí∞ –ü–æ–ª—É—á–∞–µ—Ç: %.8f %s
            
            üìÖ –°–æ–∑–¥–∞–Ω–∞: %s
            """,
                application.getId(),
                application.getUser().getFirstName(),
                application.getUser().getLastName() != null ? application.getUser().getLastName() : "",
                application.getUser().getUsername() != null ? application.getUser().getUsername() : "–Ω–µ—Ç username",
                application.getUser().getTelegramId(),
                application.getTitle(),
                application.getStatus().getDisplayName(),
                application.getCalculatedGiveValue(),
                application.getUserValueGiveType().getDisplayName(),
                application.getCalculatedGetValue(),
                application.getUserValueGetType().getDisplayName(),
                application.getCreatedAt().format(DateTimeFormatter.ofPattern("dd.MM.yyyy HH:mm"))
        );

        if (application.getAppliedCoupon() != null) {
            message += String.format("\nüé´ –ü—Ä–∏–º–µ–Ω–µ–Ω –∫—É–ø–æ–Ω: %s", application.getAppliedCoupon().getCode());
        }

        ReplyKeyboardMarkup keyboard = createAdminApplicationActionsKeyboard();
        lastMessageId.put(chatId, bot.sendMessageWithKeyboard(chatId, message, keyboard));
    }
    private void processOtherMenu(Long chatId, User user, String text, MyBot bot) {
        switch (text) {
            case "üìã –ú–æ–∏ –∑–∞—è–≤–∫–∏":
                user.setState(UserState.VIEWING_APPLICATIONS);
                userService.update(user);
                processViewingApplications(chatId, user, bot);
                break;
            case "üé´ –ú–æ–∏ –∫—É–ø–æ–Ω—ã":
                user.setState(UserState.VIEWING_COUPONS);
                userService.update(user);
                processViewingCoupons(chatId, user, bot);
                break;
            case "üìä –û—á–µ—Ä–µ–¥—å":
                user.setState(UserState.VIEWING_QUEUE);
                userService.update(user);
                processViewingQueue(chatId, user, bot);
                break;
            case "üßÆ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä":
                showCalculatorMenu(chatId, user, bot);
                break;
            case "üìà –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞":
                user.setState(UserState.REFERRAL_MENU);
                userService.update(user);
                showReferralMenu(chatId, user, bot);
                break;
            case "üìä –ö—É—Ä—Å—ã":
                showExchangeRates(chatId, user, bot);
                break;
            case "üë§ –ü—Ä–æ—Ñ–∏–ª—å":
                showProfile(chatId, user, bot);
                break;
            case "üí∞ –ë–æ–Ω—É—Å—ã":
                showBonusBalance(chatId, user, bot);
                break;
            case "üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
                processMainMenu(chatId, user, bot);
                break;
            default:
                lastMessageId.put(chatId, bot.sendMessageWithKeyboard(chatId, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏", createOtherMenuKeyboard()));
        }
    }
    private void processReferralMenu(Long chatId, User user, String text, MyBot bot) {
        switch (text) {
            case "–°–æ–∑–¥–∞—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥":
                user.setState(UserState.CREATING_REFERRAL_CODE);
                userService.update(user);
                lastMessageId.put(chatId, bot.sendMessageWithKeyboard(chatId,
                        "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≤–∞—à–µ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: '–î–ª—è –¥—Ä—É–∑–µ–π' –∏–ª–∏ '–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ'):",
                        createBackKeyboard()));
                break;
            case "üîô –ù–∞–∑–∞–¥":
                user.setState(UserState.OTHER_MENU);
                userService.update(user);
                showOtherMenu(chatId, user, bot);
                break;
            case "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
                processMainMenu(chatId, user, bot);
                break;
            default:
                lastMessageId.put(chatId, bot.sendMessageWithKeyboard(chatId,
                        "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏", createReferralMenuKeyboard()));
        }
    }
    private void showCalculatorMenu(Long chatId, User user, MyBot bot) {
        String message = "üßÆ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä\n\n" +
                "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–∞—Å—á–µ—Ç–∞:";
        ReplyKeyboardMarkup keyboard = createCalculatorMenuKeyboard();
        lastMessageId.put(chatId, bot.sendMessageWithKeyboard(chatId, message, keyboard));
    }

    private ReplyKeyboardMarkup createCalculatorMenuKeyboard() {
        ReplyKeyboardMarkup keyboard = new ReplyKeyboardMarkup();
        keyboard.setResizeKeyboard(true);
        keyboard.setOneTimeKeyboard(false);

        List<KeyboardRow> rows = new ArrayList<>();

        KeyboardRow row1 = new KeyboardRow();
        row1.add("üí∞ –ö—É–ø–∏—Ç—å BTC");
        row1.add("üí∏ –ü—Ä–æ–¥–∞—Ç—å BTC");

        KeyboardRow row2 = new KeyboardRow();
        row2.add("üîô –ù–∞–∑–∞–¥");

        rows.add(row1);
        rows.add(row2);

        keyboard.setKeyboard(rows);
        return keyboard;
    }
    private void showReferralMenu(Long chatId, User user, MyBot bot) {
        user = userService.find(user.getId()); // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
        Long referralCount = referralService.getUserReferralCount(user.getId());
        List<ReferralCode> userCodes = referralService.getUserReferralCodes(user.getId());

        StringBuilder message = new StringBuilder();
        message.append("üìà –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞\n\n");
        message.append(String.format("üë• –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: %d\n", referralCount));
        message.append(String.format("üí∞ –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: %.2f ‚ÇΩ\n\n", user.getReferralEarnings()));

        if (user.getUsedReferralCode() != null) {
            message.append(String.format("‚úÖ –í—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥: %s\n\n", user.getUsedReferralCode()));
        }

        message.append("–í–∞—à–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ –∫–æ–¥—ã:\n");
        if (userCodes.isEmpty()) {
            message.append("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö –∫–æ–¥–æ–≤.\n");
        } else {
            for (ReferralCode code : userCodes) {
                message.append(String.format("üî∏ –ö–æ–¥: %s (–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π: %d)\n",
                        code.getCode(), code.getUsages().size()));
            }
        }

        ReplyKeyboardMarkup keyboard = createReferralMenuKeyboard();
        lastMessageId.put(chatId, bot.sendMessageWithKeyboard(chatId, message.toString(), keyboard));
    }
    private void processCreatingReferralCode(Long chatId, User user, String text, MyBot bot) {
        if (text.equals("–ù–∞–∑–∞–¥") || text.equals("üîô –ù–∞–∑–∞–¥") || text.equals("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")) {
            user.setState(UserState.REFERRAL_MENU);
            userService.update(user);
            showReferralMenu(chatId, user, bot);
            return;
        }

        try {
            // –¢–µ–ø–µ—Ä—å —Å–æ–∑–¥–∞–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥ –ë–ï–ó –æ–ø–∏—Å–∞–Ω–∏—è
            ReferralCode referralCode = referralService.createReferralCode(user);

            String message = String.format("""
            ‚úÖ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥ —Å–æ–∑–¥–∞–Ω!
            
            üî∏ –í–∞—à –∫–æ–¥: %s
            
            –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –¥–µ–ª–∏—Ç—å—Å—è —ç—Ç–∏–º –∫–æ–¥–æ–º —Å –¥—Ä—É–∑—å—è–º–∏. 
            –ó–∞ –∫–∞–∂–¥—É—é —É—Å–ø–µ—à–Ω—É—é –∑–∞—è–≤–∫—É —Ä–µ—Ñ–µ—Ä–∞–ª–∞ –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å %.2f%% –æ—Ç —Å—É–º–º—ã –∑–∞—è–≤–∫–∏.
            """,
                    referralCode.getCode(),
                    referralCode.getRewardPercent());

            lastMessageId.put(chatId, bot.sendMessageWithKeyboard(chatId, message, createReferralMenuKeyboard()));

            user.setState(UserState.REFERRAL_MENU);
            userService.update(user);

        } catch (Exception e) {
            e.printStackTrace();
            lastMessageId.put(chatId, bot.sendMessageWithKeyboard(chatId,
                    "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                    createBackKeyboard()));
        }
    }
    private void processEnteringReferralCode(Long chatId, User user, String text, MyBot bot) {
        if (text.equals("–ù–∞–∑–∞–¥") || text.equals("üîô –ù–∞–∑–∞–¥") || text.equals("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")) {
            user.setState(UserState.MAIN_MENU);
            userService.update(user);
            showMainMenu(chatId, user, bot);
            return;
        }

        boolean success = referralService.useReferralCode(text.trim(), user);
        if (success) {
            // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            user = userService.find(user.getId());

            String message = "‚úÖ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥ —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!\n\n" +
                    "–¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –±–æ–Ω—É—Å—ã –∑–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã—Ö –¥—Ä—É–∑–µ–π.\n" +
                    "–°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ –≤ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–µ!";

            lastMessageId.put(chatId, bot.sendMessageWithKeyboard(chatId, message, createMainMenuKeyboard(user)));

            user.setState(UserState.MAIN_MENU);
            userService.update(user);
        } else {
            String message = "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥ –∏–ª–∏ –æ–Ω —É–∂–µ –±—ã–ª –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω.\n\n" +
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–¥ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.";
            lastMessageId.put(chatId, bot.sendMessageWithKeyboard(chatId, message, createBackKeyboard()));
        }
    }

    private ReplyKeyboardMarkup createReferralMenuKeyboard() {
        ReplyKeyboardMarkup keyboard = new ReplyKeyboardMarkup();
        keyboard.setResizeKeyboard(true);
        keyboard.setOneTimeKeyboard(false);

        List<KeyboardRow> rows = new ArrayList<>();

        KeyboardRow row1 = new KeyboardRow();
        row1.add("–°–æ–∑–¥–∞—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥");

        KeyboardRow row2 = new KeyboardRow();
        row2.add("üîô –ù–∞–∑–∞–¥");
        row2.add("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é");

        rows.add(row1);
        rows.add(row2);

        keyboard.setKeyboard(rows);
        return keyboard;
    }


    // –ú–µ—Ç–æ–¥—ã —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä
    private InlineKeyboardMarkup createCaptchaKeyboard(List<String> options) {
        InlineKeyboardMarkup markup = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> rows = new ArrayList<>();

        for (int i = 0; i < options.size(); i += 2) {
            List<InlineKeyboardButton> row = new ArrayList<>();
            for (int j = i; j < i + 2 && j < options.size(); j++) {
                String emoji = options.get(j);
                InlineKeyboardButton button = new InlineKeyboardButton();
                button.setText(emoji);
                button.setCallbackData("captcha_" + emoji);
                row.add(button);
            }
            rows.add(row);
        }

        markup.setKeyboard(rows);
        return markup;
    }

    private ReplyKeyboardMarkup createMainMenuKeyboard(User user) {
        ReplyKeyboardMarkup keyboard = new ReplyKeyboardMarkup();
        keyboard.setResizeKeyboard(true);
        keyboard.setOneTimeKeyboard(false);

        List<KeyboardRow> rows = new ArrayList<>();

        KeyboardRow row1 = new KeyboardRow();
        row1.add("üí∞ –ö—É–ø–∏—Ç—å");
        row1.add("üí∏ –ü—Ä–æ–¥–∞—Ç—å");

        // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–≤–æ–¥–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–µ—Ö, –∫—Ç–æ –µ–≥–æ –Ω–µ –≤–≤–æ–¥–∏–ª
        if (user.getUsedReferralCode() == null) {
            KeyboardRow referralRow = new KeyboardRow();
            referralRow.add("üé´ –í–≤–µ—Å—Ç–∏ —Ä–µ—Ñ. –∫–æ–¥");
            rows.add(referralRow);
        }

        KeyboardRow row2 = new KeyboardRow();
        row2.add("‚öôÔ∏è –ü—Ä–æ—á–µ–µ");

        // –î–æ–±–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω—Å–∫—É—é –ø–∞–Ω–µ–ª—å –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
        if (adminConfig.isAdmin(user.getId())) {
            KeyboardRow adminRow = new KeyboardRow();
            adminRow.add("üë®‚Äçüíº –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å");
            rows.add(adminRow);
        }

        rows.add(row1);
        rows.add(row2);

        keyboard.setKeyboard(rows);
        return keyboard;
    }
    private ReplyKeyboardMarkup createAdminApplicationActionsKeyboard() {
        ReplyKeyboardMarkup keyboard = new ReplyKeyboardMarkup();
        keyboard.setResizeKeyboard(true);
        keyboard.setOneTimeKeyboard(false);

        List<KeyboardRow> rows = new ArrayList<>();

        KeyboardRow row1 = new KeyboardRow();
        row1.add("üü° –í —Ä–∞–±–æ—Ç—É");
        row1.add("üîµ –ó–∞–∫—Ä—ã—Ç—å");

        KeyboardRow row2 = new KeyboardRow();
        row2.add("üî¥ –û—Ç–º–µ–Ω–∏—Ç—å");
        row2.add("üü¢ –°–≤–æ–±–æ–¥–Ω–∞");

        KeyboardRow row3 = new KeyboardRow();
        row3.add("üìã –í—Å–µ –∑–∞—è–≤–∫–∏");
        row3.add("üë®‚Äçüíº –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å"); // –ù–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞

        rows.add(row1);
        rows.add(row2);
        rows.add(row3);

        keyboard.setKeyboard(rows);
        return keyboard;
    }


    private ReplyKeyboardMarkup createBuyMenuKeyboard() {
        ReplyKeyboardMarkup keyboard = new ReplyKeyboardMarkup();
        keyboard.setResizeKeyboard(true);
        keyboard.setOneTimeKeyboard(false);

        List<KeyboardRow> rows = new ArrayList<>();

        KeyboardRow row1 = new KeyboardRow();
        row1.add("–í–≤–µ—Å—Ç–∏ —Å—É–º–º—É –≤ RUB");
        row1.add("–í–≤–µ—Å—Ç–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ BTC");

        KeyboardRow row2 = new KeyboardRow();
        row2.add("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é");

        rows.add(row1);
        rows.add(row2);

        keyboard.setKeyboard(rows);
        return keyboard;
    }

    private ReplyKeyboardMarkup createSellMenuKeyboard() {
        ReplyKeyboardMarkup keyboard = new ReplyKeyboardMarkup();
        keyboard.setResizeKeyboard(true);
        keyboard.setOneTimeKeyboard(false);

        List<KeyboardRow> rows = new ArrayList<>();

        KeyboardRow row1 = new KeyboardRow();
        row1.add("–í–≤–µ—Å—Ç–∏ —Å—É–º–º—É");

        KeyboardRow row2 = new KeyboardRow();
        row2.add("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é");

        rows.add(row1);
        rows.add(row2);

        keyboard.setKeyboard(rows);
        return keyboard;
    }

    private ReplyKeyboardMarkup createAmountInputKeyboard() {
        ReplyKeyboardMarkup keyboard = new ReplyKeyboardMarkup();
        keyboard.setResizeKeyboard(true);
        keyboard.setOneTimeKeyboard(false);

        List<KeyboardRow> rows = new ArrayList<>();

        KeyboardRow row1 = new KeyboardRow();
        row1.add("–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä");

        KeyboardRow row2 = new KeyboardRow();
        row2.add("–ù–∞–∑–∞–¥");
        row2.add("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é");

        rows.add(row1);
        rows.add(row2);

        keyboard.setKeyboard(rows);
        return keyboard;
    }

    private ReplyKeyboardMarkup createCouponApplicationKeyboard() {
        ReplyKeyboardMarkup keyboard = new ReplyKeyboardMarkup();
        keyboard.setResizeKeyboard(true);
        keyboard.setOneTimeKeyboard(false);

        List<KeyboardRow> rows = new ArrayList<>();

        KeyboardRow row1 = new KeyboardRow();
        row1.add("–ü—Ä–∏–º–µ–Ω–∏—Ç—å –∫—É–ø–æ–Ω");
        row1.add("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å");

        KeyboardRow row2 = new KeyboardRow();
        row2.add("–ù–∞–∑–∞–¥");
        row2.add("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é");

        rows.add(row1);
        rows.add(row2);

        keyboard.setKeyboard(rows);
        return keyboard;
    }

    private ReplyKeyboardMarkup createBackKeyboard() {
        ReplyKeyboardMarkup keyboard = new ReplyKeyboardMarkup();
        keyboard.setResizeKeyboard(true);
        keyboard.setOneTimeKeyboard(false);

        List<KeyboardRow> rows = new ArrayList<>();

        KeyboardRow row1 = new KeyboardRow();
        row1.add("–ù–∞–∑–∞–¥");

        rows.add(row1);

        keyboard.setKeyboard(rows);
        return keyboard;
    }
    private ReplyKeyboardMarkup createConfirmationKeyboard() {
        ReplyKeyboardMarkup keyboard = new ReplyKeyboardMarkup();
        keyboard.setResizeKeyboard(true);
        keyboard.setOneTimeKeyboard(false);

        List<KeyboardRow> rows = new ArrayList<>();

        KeyboardRow row1 = new KeyboardRow();
        row1.add("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å");
        row1.add("–û—Ç–º–µ–Ω–∞");

        rows.add(row1);

        keyboard.setKeyboard(rows);
        return keyboard;
    }

    private ReplyKeyboardMarkup createOtherMenuKeyboard() {
        ReplyKeyboardMarkup keyboard = new ReplyKeyboardMarkup();
        keyboard.setResizeKeyboard(true);
        keyboard.setOneTimeKeyboard(false);

        List<KeyboardRow> rows = new ArrayList<>();

        KeyboardRow row1 = new KeyboardRow();
        row1.add("üìã –ú–æ–∏ –∑–∞—è–≤–∫–∏");
        row1.add("üé´ –ú–æ–∏ –∫—É–ø–æ–Ω—ã");

        KeyboardRow row2 = new KeyboardRow();
        row2.add("üìä –û—á–µ—Ä–µ–¥—å");
        row2.add("üßÆ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä");

        KeyboardRow row3 = new KeyboardRow();
        row3.add("üìà –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞");
        row3.add("üìä –ö—É—Ä—Å—ã");

        KeyboardRow row4 = new KeyboardRow();
        row4.add("üë§ –ü—Ä–æ—Ñ–∏–ª—å");
        row4.add("üí∞ –ë–æ–Ω—É—Å—ã");

        KeyboardRow row5 = new KeyboardRow();
        row5.add("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é");

        rows.add(row1);
        rows.add(row2);
        rows.add(row3);
        rows.add(row4);
        rows.add(row5);

        keyboard.setKeyboard(rows);
        return keyboard;
    }
    // –í –∞–¥–º–∏–Ω—Å–∫–æ–º –º–µ–Ω—é –¥–æ–±–∞–≤–∏–º –∫–Ω–æ–ø–∫—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–∏—Å—Å–∏—è–º–∏
    private ReplyKeyboardMarkup createAdminMainMenuKeyboard() {
        ReplyKeyboardMarkup keyboard = new ReplyKeyboardMarkup();
        keyboard.setResizeKeyboard(true);
        keyboard.setOneTimeKeyboard(false);

        List<KeyboardRow> rows = new ArrayList<>();

        KeyboardRow row1 = new KeyboardRow();
        row1.add("üìã –í—Å–µ –∑–∞—è–≤–∫–∏");
        row1.add("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞");

        KeyboardRow row2 = new KeyboardRow();
        row2.add("üí∞ –ö–æ–º–∏—Å—Å–∏–∏");
        row2.add("üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏");

        KeyboardRow row3 = new KeyboardRow();
        row3.add("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é");

        rows.add(row1);
        rows.add(row2);
        rows.add(row3);

        keyboard.setKeyboard(rows);
        return keyboard;
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–∏—Å—Å–∏—è–º–∏

}